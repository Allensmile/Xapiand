{
  "info": {
    "name": "Xapiand",
    "description": "Xapiand is A Modern Highly Available Distributed RESTful Search and Storage Engine built for the Cloud and with Data Locality in mind.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Quick Start",
      "item": [
        {
          "name": "Data Manipulation",
          "item": [
            {
              "name": "Index: PUT John -> John Doe",
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "url": {
                  "host": [
                    "{{domain}}"
                  ],
                  "path": [
                    "twitter",
                    "user",
                    "John"
                  ],
                  "query": [
                    {
                      "key": "commit",
                      "value": null
                    },
                    {
                      "key": "echo",
                      "value": null
                    }
                  ]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"John Doe\"\n}"
                }
              }
            },
            {
              "name": "Index: PUT John -> John",
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "url": {
                  "host": [
                    "{{domain}}"
                  ],
                  "path": [
                    "twitter",
                    "user",
                    "John"
                  ],
                  "query": [
                    {
                      "key": "commit",
                      "value": null
                    },
                    {
                      "key": "echo",
                      "value": null
                    }
                  ]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"John\"\n}"
                }
              }
            },
            {
              "name": "Index: PUT Jane -> Jane Doe",
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "url": {
                  "host": [
                    "{{domain}}"
                  ],
                  "path": [
                    "twitter",
                    "user",
                    "Jane"
                  ],
                  "query": [
                    {
                      "key": "commit",
                      "value": null
                    },
                    {
                      "key": "echo",
                      "value": null
                    }
                  ]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Jane Doe\",\n  \"age\": 20\n}"
                }
              }
            },
            {
              "name": "Index: POST -> Richard Roe",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "url": {
                  "host": [
                    "{{domain}}"
                  ],
                  "path": [
                    "twitter",
                    "user",
                    ""
                  ],
                  "query": [
                    {
                      "key": "commit",
                      "value": null
                    },
                    {
                      "key": "echo",
                      "value": null
                    }
                  ]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Richard Roe\"\n}"
                }
              }
            },
            {
              "name": "Index: UPDATE John -> male",
              "request": {
                "method": "UPDATE",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "url": {
                  "host": [
                    "{{domain}}"
                  ],
                  "path": [
                    "twitter",
                    "user",
                    "John"
                  ],
                  "query": [
                    {
                      "key": "commit",
                      "value": null
                    },
                    {
                      "key": "echo",
                      "value": null
                    }
                  ]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"gender\": \"male\"\n}"
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"response is ok\", function() {",
                      "    pm.response.to.be.ok;",
                      "});",
                      "pm.test(\"response is merged\", function() {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.name).to.be.an('string')",
                      "    pm.expect(jsonData.gender).to.equal('male')",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "Index: UPDATE John -> Johnny Doe, 17",
              "request": {
                "method": "UPDATE",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "url": {
                  "host": [
                    "{{domain}}"
                  ],
                  "path": [
                    "twitter",
                    "user",
                    "John"
                  ],
                  "query": [
                    {
                      "key": "commit",
                      "value": null
                    },
                    {
                      "key": "echo",
                      "value": null
                    }
                  ]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Johnny Doe\",\n  \"age\": 17\n}"
                }
              }
            },
            {
              "name": "Index: UPDATE John -> John Doe, 22 (scripted)",
              "request": {
                "method": "UPDATE",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "url": {
                  "host": [
                    "{{domain}}"
                  ],
                  "path": [
                    "twitter",
                    "user",
                    "John"
                  ],
                  "query": [
                    {
                      "key": "commit",
                      "value": null
                    },
                    {
                      "key": "echo",
                      "value": null
                    }
                  ]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"John Doe\",\n  \"_script\": \"_doc.age = _old_doc.age + 5\"\n}"
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"response is ok\", function() {",
                      "    pm.response.to.be.ok;",
                      "});",
                      "pm.test(\"response is merged\", function() {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.gender).to.be.an('string')",
                      "    pm.expect(jsonData.name).to.equal('John Doe')",
                      "});",
                      "pm.test(\"response with script applied\", function() {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.age).to.equal(22)",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "Data Exploration",
          "item": [
            {
              "name": "Load sample data",
              "request": {
                "method": "RESTORE",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/x-ndjson",
                    "type": "text"
                  }
                ],
                "url": {
                  "host": [
                    "{{domain}}"
                  ],
                  "path": [
                    "bank",
                    ""
                  ],
                  "query": [
                    {
                      "key": "commit",
                      "value": null
                    },
                    {
                      "key": "echo",
                      "value": null
                    }
                  ]
                },
                "body": {
                  "mode": "file",
                  "file": {
                    "src": "docs/assets/accounts.ndjson"
                  }
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"response is ok\", function() {",
                      "    pm.response.to.be.ok;",
                      "});",
                      "pm.test(\"response is valid\", function() {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.processed).to.be.an('number')",
                      "    pm.expect(jsonData.indexed).to.be.an('number')",
                      "    pm.expect(jsonData.total).to.be.an('number')",
                      "    pm.expect(jsonData.items).to.be.an('array')",
                      "});",
                      "pm.test(\"restore received all\", function() {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.total).to.equal(1000)",
                      "});",
                      "pm.test(\"restore processed all\", function() {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.processed).to.equal(1000)",
                      "});",
                      "pm.test(\"restore indexed all\", function() {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.indexed).to.equal(1000)",
                      "    pm.expect(jsonData.items.length).to.equal(1000);",
                      "});",
                      "pm.test(\"restore values are valid\", function() {",
                      "    var jsonData = pm.response.json();",
                      "    for (var i = 0; i < 1000; ++i) {",
                      "        pm.expect(jsonData.items[i]._id).to.equal(i + 1);",
                      "    }",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "Search ordered by accountNumber",
              "request": {
                "method": "SEARCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "url": {
                  "host": [
                    "{{domain}}"
                  ],
                  "path": [
                    "bank",
                    ".accountNumber"
                  ],
                  "query": [
                    {
                      "key": "volatile",
                      "value": null
                    },
                    {
                      "key": "sort",
                      "value": "accountNumber"
                    }
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"response is ok\", function() {",
                      "    pm.response.to.be.ok;",
                      "});",
                      "pm.test(\"response values are valid\", function() {",
                      "    var jsonData = pm.response.json();",
                      "    var expected = [100123,100481,101121,101253,101294,103213,103486,103710,104419,107465];",
                      "    for (var i = 0; i < expected.length; ++i) {",
                      "        pm.expect(jsonData.hits[i]).to.equal(expected[i]);",
                      "    }",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "Search ordered by balance",
              "request": {
                "method": "SEARCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "url": {
                  "host": [
                    "{{domain}}"
                  ],
                  "path": [
                    "bank",
                    ".balance"
                  ],
                  "query": [
                    {
                      "key": "volatile",
                      "value": null
                    }
                  ]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"_query\": \"*\",\n  \"_sort\": { \"balance\": { \"_order\": \"desc\" } }\n}"
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"response is ok\", function() {",
                      "    pm.response.to.be.ok;",
                      "});",
                      "pm.test(\"response values are valid\", function() {",
                      "    var jsonData = pm.response.json();",
                      "    var expected = [12699.46,10857.55,10819.51,10729.87,10663.25,10643.84,10513.99,10448.36,10087.41,10073.05];",
                      "    for (var i = 0; i < expected.length; ++i) {",
                      "        pm.expect(jsonData.hits[i]).to.equal(expected[i]);",
                      "    }",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "Search filtered balance",
              "request": {
                "method": "COUNT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "url": {
                  "host": [
                    "{{domain}}"
                  ],
                  "path": [
                    "bank",
                    ".balance"
                  ],
                  "query": [
                    {
                      "key": "volatile",
                      "value": null
                    },
                    {
                      "key": "limit",
                      "value": 1000
                    }
                  ]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"_query\": {\n    \"balance\": {\n      \"_in\": {\n        \"_range\": {\n          \"_from\": 2000,\n          \"_to\": 3000\n        }\n      }\n    }\n  }\n}"
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"response is ok\", function() {",
                      "    pm.response.to.be.ok;",
                      "});",
                      "pm.test(\"response is valid\", function() {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.total).to.equal(286);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "Documents",
      "item": [
        {
          "name": "Store API",
          "item": [
            {
              "name": "Store PNG",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"response is ok\", function() {",
                      "    pm.response.to.be.ok;",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "STORE",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "image/png",
                    "type": "text"
                  }
                ],
                "url": {
                  "host": [
                    "{{domain}}"
                  ],
                  "path": [
                    "assets",
                    "Lenna"
                  ],
                  "query": [
                    {
                      "key": "commit",
                      "value": null
                    },
                    {
                      "key": "echo",
                      "value": null
                    }
                  ]
                },
                "body": {
                  "mode": "file",
                  "file": {
                    "src": "docs/assets/Lenna.png"
                  }
                }
              }
            },
            {
              "name": "Store PDF (Using Content-Type)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"response is ok\", function() {",
                      "    pm.response.to.be.ok;",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "STORE",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/pdf",
                    "type": "text"
                  }
                ],
                "url": {
                  "host": [
                    "{{domain}}"
                  ],
                  "path": [
                    "assets",
                    "Lenna"
                  ],
                  "query": [
                    {
                      "key": "commit",
                      "value": null
                    },
                    {
                      "key": "echo",
                      "value": null
                    }
                  ]
                },
                "body": {
                  "mode": "file",
                  "file": {
                    "src": "docs/assets/Lenna.pdf"
                  }
                }
              }
            },
            {
              "name": "Store JPG (Using .jpg selector)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"response is ok\", function() {",
                      "    pm.response.to.be.ok;",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "STORE",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "image/jpeg",
                    "type": "text"
                  }
                ],
                "url": {
                  "host": [
                    "{{domain}}"
                  ],
                  "path": [
                    "assets",
                    "Lenna.jpg"
                  ],
                  "query": [
                    {
                      "key": "commit",
                      "value": null
                    },
                    {
                      "key": "echo",
                      "value": null
                    }
                  ]
                },
                "body": {
                  "mode": "file",
                  "file": {
                    "src": "docs/assets/Lenna.jpg"
                  }
                }
              }
            },
            {
              "name": "Retrieve PDF (Using Accept)",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/pdf",
                    "type": "text"
                  }
                ],
                "url": {
                  "host": [
                    "{{domain}}"
                  ],
                  "path": [
                    "assets",
                    "Lenna"
                  ],
                  "query": [
                    {
                      "key": "volatile",
                      "value": null
                    }
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"response is ok\", function() {",
                      "    pm.response.to.be.ok;",
                      "});",
                      "pm.test(\"response content type is PDF\", function() {",
                      "    pm.response.to.be.header('Content-Type', 'application/pdf');",
                      "});",
                      "pm.test(\"response is stored PDF\", function() {",
                      "    pm.expect(pm.response.stream.length).to.equal(692615);",
                      "    // pm.expect(CryptoJS.SHA256(pm.response.stream).toString()).to.equal('66bb6df2255f34e2be54344047dad389a94be873e53a0b4c46817a3ecaeb6a61')",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "Retrieve PNG (Using .png selector)",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*",
                    "type": "text"
                  }
                ],
                "url": {
                  "host": [
                    "{{domain}}"
                  ],
                  "path": [
                    "assets",
                    "Lenna.png"
                  ],
                  "query": [
                    {
                      "key": "volatile",
                      "value": null
                    }
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"response is ok\", function() {",
                      "    pm.response.to.be.ok;",
                      "});",
                      "pm.test(\"response content type is PNG\", function() {",
                      "    pm.response.to.be.header('Content-Type', 'image/png');",
                      "});",
                      "pm.test(\"response is stored PNG\", function() {",
                      "    pm.expect(pm.response.stream.length).to.equal(473831);",
                      "    // pm.expect(CryptoJS.SHA256(pm.response.stream).toString()).to.equal('7e497501a28bcf9a353ccadf6eb9216bf098ac32888fb542fb9bfe71d486761f')",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "Retrieve JPG (Last stored)",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*",
                    "type": "text"
                  }
                ],
                "url": {
                  "host": [
                    "{{domain}}"
                  ],
                  "path": [
                    "assets",
                    "Lenna"
                  ],
                  "query": [
                    {
                      "key": "volatile",
                      "value": null
                    }
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"response is ok\", function() {",
                      "    pm.response.to.be.ok;",
                      "});",
                      "pm.test(\"response content type is JPG\", function() {",
                      "    pm.response.to.be.header('Content-Type', 'image/jpeg');",
                      "});",
                      "pm.test(\"response is stored JPG\", function() {",
                      "    pm.expect(pm.response.stream.length).to.equal(570958);",
                      "    // pm.expect(CryptoJS.SHA256(pm.response.stream).toString()).to.equal('820eae76e4639a059a1bc799763ad82961ffbc8d41b58920a3f7ac622455ed46')",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "Indices",
      "item": [
      ]
    },
    {
      "name": "Schemas",
      "item": [
      ]
    },
    {
      "name": "Search",
      "item": [
        {
          "name": "Search API",
          "item": [
          ]
        },
        {
          "name": "Query DSL",
          "item": [
             {
              "name": "Leaf Queries",
              "item": [
                {
                  "name": "Match All Query",
                  "request": {
                    "method": "SEARCH",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "host": [
                        "{{domain}}"
                      ],
                      "path": [
                        "bank",
                        ""
                      ]
                    },
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"_query\": {\n    \"_match_all\": \"{}\"\n    }\n}"
                    }
                  },
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"response is ok\", function() {",
                          "    pm.response.to.be.ok;",
                          "});",
                          "pm.test(\"match all count\", function() {",
                          "    var jsonData = pm.response.json();",
                          "    pm.expect(jsonData.count).to.equal(10)",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ]
                },
                {
                  "name": "Match None Query",
                  "request": {
                    "method": "SEARCH",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "host": [
                        "{{domain}}"
                      ],
                      "path": [
                        "bank",
                        ""
                      ]
                    },
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"_query\": {\n    \"_match_none\": \"{}\"\n    }\n}"
                    }
                  },
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"response is ok\", function() {",
                          "    pm.response.to.be.ok;",
                          "});",
                          "pm.test(\"match none count\", function() {",
                          "    var jsonData = pm.response.json();",
                          "    pm.expect(jsonData.count).to.equal(0)",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ]
                },
                {
                  "name": "Simple Query",
                  "request": {
                    "method": "SEARCH",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "host": [
                        "{{domain}}"
                      ],
                      "path": [
                        "bank",
                        ""
                      ]
                    },
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"_query\": {\n    \"favoriteFruit\": \"banana\"\n    },  \"_limit\": 1\n}"
                    }
                  },
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"response is ok\", function() {",
                          "    pm.response.to.be.ok;",
                          "});",
                          "pm.test(\"simple query count\", function() {",
                          "    var jsonData = pm.response.json();",
                          "    pm.expect(jsonData.count).to.equal(1);",
                          "});",
                          "pm.test(\"simple query size\", function() {",
                          "    var jsonData = pm.response.json();",
                          "    pm.expect(jsonData.hits.length).to.equal(1);",
                          "});",
                          "pm.test(\"simple query value is valid\", function() {",
                          "    var jsonData = pm.response.json();",
                          "    pm.expect(jsonData.hits[0].favoriteFruit).to.equal('banana');",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ]
                },
                {
                  "name": "Text Queries",
                  "item": [
                    {
                      "name": "Simple Query",
                      "request": {
                        "method": "SEARCH",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json",
                            "type": "text"
                          }
                        ],
                        "url": {
                          "host": [
                            "{{domain}}"
                          ],
                          "path": [
                            "bank",
                            ""
                          ]
                        },
                        "body": {
                          "mode": "raw",
                          "raw": "{\n  \"_query\": {\n    \"personality\": \"responsive\"\n    },    \"_sort\": \"accountNumber\"\n}"
                        }
                      },
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm.test(\"response is ok\", function() {",
                              "    pm.response.to.be.ok;",
                              "});",
                              "pm.test(\"simple query count\", function() {",
                              "    var jsonData = pm.response.json();",
                              "    pm.expect(jsonData.count).to.equal(10);",
                              "});",
                              "pm.test(\"simple query size\", function() {",
                              "    var jsonData = pm.response.json();",
                              "    pm.expect(jsonData.hits.length).to.equal(10);",
                              "});",
                              "pm.test(\"simple query value is valid\", function() {",
                              "    var jsonData = pm.response.json();",
                              "    var expected = [101253,109766,119292,121222,124835,134749,137909,152669,154831,163396];",
                              "    for (var i = 0; i < 10; ++i) {",
                              "        pm.expect(jsonData.hits[i].accountNumber).to.equal(expected[i]);",
                              "    }",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ]
                    },
                    {
                      "name": "Phrase",
                      "request": {
                        "method": "SEARCH",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json",
                            "type": "text"
                          }
                        ],
                        "url": {
                          "host": [
                            "{{domain}}"
                          ],
                          "path": [
                            "bank",
                            ""
                          ]
                        },
                        "body": {
                          "mode": "raw",
                          "raw": "{\n  \"_query\": {\n    \"personality\": {\n \"_phrase\":    \"these days are few and far between\"    }\n},    \"_sort\": \"accountNumber\"\n}"
                        }
                      },
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm.test(\"response is ok\", function() {",
                              "    pm.response.to.be.ok;",
                              "});",
                              "pm.test(\"phrase query count\", function() {",
                              "    var jsonData = pm.response.json();",
                              "    pm.expect(jsonData.count).to.equal(10);",
                              "});",
                              "pm.test(\"phrase query size\", function() {",
                              "    var jsonData = pm.response.json();",
                              "    pm.expect(jsonData.hits.length).to.equal(10);",
                              "});",
                              "pm.test(\"phrase query values are valid\", function() {",
                              "    var jsonData = pm.response.json();",
                              "    var expected = [123359,141204,155986,179019,206371,206641,208048,211583,223600,225744];",
                              "    for (var i = 0; i < 10; ++i) {",
                              "        pm.expect(jsonData.hits[i].accountNumber).to.equal(expected[i]);",
                              "    }",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ]
                    },
                    {
                      "name": "Partial",
                      "request": {
                        "method": "SEARCH",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json",
                            "type": "text"
                          }
                        ],
                        "url": {
                          "host": [
                            "{{domain}}"
                          ],
                          "path": [
                            "bank",
                            ""
                          ]
                        },
                        "body": {
                          "mode": "raw",
                          "raw": "{\n  \"_query\": {\n    \"favoriteFruit\": \"ba*\"   \n},   \"_sort\": \"accountNumber\"\n}"
                        }
                      },
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm.test(\"response is ok\", function() {",
                              "    pm.response.to.be.ok;",
                              "});",
                              "pm.test(\"partial query count\", function() {",
                              "    var jsonData = pm.response.json();",
                              "    pm.expect(jsonData.count).to.equal(10);",
                              "});",
                              "pm.test(\"partial query size\", function() {",
                              "    var jsonData = pm.response.json();",
                              "    pm.expect(jsonData.hits.length).to.equal(10);",
                              "});",
                              "pm.test(\"partial query values are valid\", function() {",
                              "    var jsonData = pm.response.json();",
                              "    var expected = [100481,103213,113400,117339,162080,165123,175116,180263,190548,191175];",
                              "    for (var i = 0; i < 10; ++i) {",
                              "        pm.expect(jsonData.hits[i].accountNumber).to.equal(expected[i]);",
                              "    }",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ]
                    },
                    {
                      "name": "Near",
                      "request": {
                        "method": "SEARCH",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json",
                            "type": "text"
                          }
                        ],
                        "url": {
                          "host": [
                            "{{domain}}"
                          ],
                          "path": [
                            "bank",
                            ""
                          ]
                        },
                        "body": {
                          "mode": "raw",
                          "raw": "{\n  \"_query\": {\n    \"personality\": {\n \"_near\":    \"adventurous ambitious\"    }\n},    \"_sort\": \"accountNumber\"\n}"
                        }
                      },
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm.test(\"response is ok\", function() {",
                              "    pm.response.to.be.ok;",
                              "});",
                              "pm.test(\"near query count\", function() {",
                              "    var jsonData = pm.response.json();",
                              "    pm.expect(jsonData.count).to.equal(2);",
                              "});",
                              "pm.test(\"near query size\", function() {",
                              "    var jsonData = pm.response.json();",
                              "    pm.expect(jsonData.hits.length).to.equal(2);",
                              "});",
                              "pm.test(\"near query values are valid\", function() {",
                              "    var jsonData = pm.response.json();",
                              "    var expected = [447943,605225];",
                              "    for (var i = 0; i < 2; ++i) {",
                              "        pm.expect(jsonData.hits[i].accountNumber).to.equal(expected[i]);",
                              "    }",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ]
                    },
                    {
                      "name": "Love and Hate",
                      "request": {
                        "method": "SEARCH",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json",
                            "type": "text"
                          }
                        ],
                        "url": {
                          "host": [
                            "{{domain}}"
                          ],
                          "path": [
                            "bank",
                            ""
                          ]
                        },
                        "body": {
                          "mode": "raw",
                          "raw": "{\n  \"_query\": {\n    \"personality\": \"\\\"adventurous nature\\\" -ambitious\"   \n},    \"_sort\": \"accountNumber\"\n}"
                        }
                      },
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm.test(\"response is ok\", function() {",
                              "    pm.response.to.be.ok;",
                              "});",
                              "pm.test(\"Love and Hate count\", function() {",
                              "    var jsonData = pm.response.json();",
                              "    pm.expect(jsonData.count).to.equal(10);",
                              "});",
                              "pm.test(\"Love and Hate size\", function() {",
                              "    var jsonData = pm.response.json();",
                              "    pm.expect(jsonData.hits.length).to.equal(10);",
                              "});",
                              "pm.test(\"Love and Hate values are valid\", function() {",
                              "    var jsonData = pm.response.json();",
                              "    var expected = [229817,348412,386529,413668,462693,504517,539397,576019,592913,594595];",
                              "    for (var i = 0; i < 10; ++i) {",
                              "        pm.expect(jsonData.hits[i].accountNumber).to.equal(expected[i]);",
                              "    }",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ]
                    },
                    {
                      "name": "Default Operator",
                      "request": {
                        "method": "SEARCH",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json",
                            "type": "text"
                          }
                        ],
                        "url": {
                          "host": [
                            "{{domain}}"
                          ],
                          "path": [
                            "bank",
                            ""
                          ]
                        },
                        "body": {
                          "mode": "raw",
                          "raw": "{\n  \"_query\": {\n    \"personality\": {\n    \"_and\": \"these days are few and far between\"    \n}   \n},    \"_sort\": \"accountNumber\"\n}"
                        }
                      },
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm.test(\"response is ok\", function() {",
                              "    pm.response.to.be.ok;",
                              "});",
                              "pm.test(\"Default operator count\", function() {",
                              "    var jsonData = pm.response.json();",
                              "    pm.expect(jsonData.count).to.equal(10);",
                              "});",
                              "pm.test(\"Default operator size\", function() {",
                              "    var jsonData = pm.response.json();",
                              "    pm.expect(jsonData.hits.length).to.equal(10);",
                              "});",
                              "pm.test(\"Default operator values are valid\", function() {",
                              "    var jsonData = pm.response.json();",
                              "    var expected = [100123, 100481, 101121, 103213, 103486, 103710, 107465, 112573, 114726, 114772];",
                              "    for (var i = 0; i < 10; ++i) {",
                              "        pm.expect(jsonData.hits[i].accountNumber).to.equal(expected[i]);",
                              "    }",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "Casting values",
                  "request": {
                    "method": "SEARCH",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "host": [
                        "{{domain}}"
                      ],
                      "path": [
                        "bank",
                        ""
                      ],
                      "query": [
                        {
                          "key": "volatile",
                          "value": null
                        }
                      ]
                    },
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"_query\": {\n    \"contact.postcode\": {\n    \"_text\": 84535    \n}   \n}\n}"
                    }
                  },
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"response is ok\", function() {",
                          "    pm.response.to.be.ok;",
                          "});",
                          "pm.test(\"Casting count\", function() {",
                          "    var jsonData = pm.response.json();",
                          "    pm.expect(jsonData.count).to.equal(1);",
                          "});",
                          "pm.test(\"Casting size\", function() {",
                          "    var jsonData = pm.response.json();",
                          "    pm.expect(jsonData.hits.length).to.equal(1);",
                          "});",
                          "pm.test(\"Casting value is valid\", function() {",
                          "    var jsonData = pm.response.json();",
                          "    var expected = [233733];",
                          "    for (var i = 0; i < 1; ++i) {",
                          "        pm.expect(jsonData.hits[i].accountNumber).to.equal(expected[i]);",
                          "    }",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ]
                },
                {
                  "name": "Namespace",
                  "request": {
                    "method": "SEARCH",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "host": [
                        "{{domain}}"
                      ],
                      "path": [
                        "bank",
                        ""
                      ],
                      "query": [
                        {
                          "key": "volatile",
                          "value": null
                        }
                      ]
                    },
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"_query\": {\n    \"style.footwear\": \"casual shoes\"   \n},    \"_sort\": \"accountNumber\"\n}"
                    }
                  },
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"response is ok\", function() {",
                          "    pm.response.to.be.ok;",
                          "});",
                          "pm.test(\"Namespace count\", function() {",
                          "    var jsonData = pm.response.json();",
                          "    pm.expect(jsonData.count).to.equal(10);",
                          "});",
                          "pm.test(\"Namespace size\", function() {",
                          "    var jsonData = pm.response.json();",
                          "    pm.expect(jsonData.hits.length).to.equal(10);",
                          "});",
                          "pm.test(\"Namespace values are valid\", function() {",
                          "    var jsonData = pm.response.json();",
                          "    var expected = [103486,111405,112573,114726,115447,116552,121222,121870,123013,123939];",
                          "    for (var i = 0; i < 10; ++i) {",
                          "        pm.expect(jsonData.hits[i].accountNumber).to.equal(expected[i]);",
                          "    }",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "name": "Compound Queries",
              "item": [
                {
                  "name": "Logical Operators",
                  "request": {
                    "method": "SEARCH",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "host": [
                        "{{domain}}"
                      ],
                      "path": [
                        "bank",
                        ""
                      ],
                      "query": [
                        {
                          "key": "volatile",
                          "value": null
                        }
                      ]
                    },
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"_query\": {\n    \"_or\": [{\n    \"favoriteFruit\": \"banana\"    \n},  {\n    \"_and\": [{\n    \"gender\": \"female\"    \n}, {\n    \"eyeColor\": \"brown\"    \n}]    \n}]    \n},  \"_sort\": \"accountNumber\"    \n}"
                    }
                  },
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"response is ok\", function() {",
                          "    pm.response.to.be.ok;",
                          "});",
                          "pm.test(\"Logical Operator count\", function() {",
                          "    var jsonData = pm.response.json();",
                          "    pm.expect(jsonData.count).to.equal(10);",
                          "});",
                          "pm.test(\"Logical Operator size\", function() {",
                          "    var jsonData = pm.response.json();",
                          "    pm.expect(jsonData.hits.length).to.equal(10);",
                          "});",
                          "pm.test(\"Logical Operator values are valid\", function() {",
                          "    var jsonData = pm.response.json();",
                          "    var expected = [100123,100481,101121,103213,112495,112573,113400,114772,117339,119292];",
                          "    for (var i = 0; i < 10; ++i) {",
                          "        pm.expect(jsonData.hits[i].accountNumber).to.equal(expected[i]);",
                          "    }",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ]
                },
                {
                  "name": "Maybe Operator",
                  "request": {
                    "method": "SEARCH",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "host": [
                        "{{domain}}"
                      ],
                      "path": [
                        "bank",
                        ""
                      ],
                      "query": [
                        {
                          "key": "volatile",
                          "value": null
                        }
                      ]
                    },
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"_query\": {\n    \"_and_maybe\": [{\n    \"favoriteFruit\": \"banana\"    \n},  {\n    \"_and\": [{\n    \"gender\": \"female\"    \n}, {\n    \"eyeColor\": \"brown\"    \n}]    \n}]    \n},  \"_sort\": \"accountNumber\"    \n}"
                    }
                  },
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"response is ok\", function() {",
                          "    pm.response.to.be.ok;",
                          "});",
                          "pm.test(\"Maybe Operator count\", function() {",
                          "    var jsonData = pm.response.json();",
                          "    pm.expect(jsonData.count).to.equal(10);",
                          "});",
                          "pm.test(\"Maybe Operator size\", function() {",
                          "    var jsonData = pm.response.json();",
                          "    pm.expect(jsonData.hits.length).to.equal(10);",
                          "});",
                          "pm.test(\"Maybe Operator values are valid\", function() {",
                          "    var jsonData = pm.response.json();",
                          "    var expected = [100481,103213,113400,117339,162080,165123,175116,180263,190548,191175];",
                          "    for (var i = 0; i < 10; ++i) {",
                          "        pm.expect(jsonData.hits[i].accountNumber).to.equal(expected[i]);",
                          "    }",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ]
                },
                {
                  "name": "Filter Operator",
                  "request": {
                    "method": "SEARCH",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "host": [
                        "{{domain}}"
                      ],
                      "path": [
                        "bank",
                        ""
                      ],
                      "query": [
                        {
                          "key": "volatile",
                          "value": null
                        }
                      ]
                    },
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"_query\": {\n    \"_filter\": [{\n    \"favoriteFruit\": \"banana\"    \n},  {\n    \"_and\": [{\n    \"gender\": \"female\"    \n}, {\n    \"eyeColor\": \"brown\"    \n}]    \n}]    \n},  \"_sort\": \"accountNumber\"    \n}"
                    }
                  },
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"response is ok\", function() {",
                          "    pm.response.to.be.ok;",
                          "});",
                          "pm.test(\"Filter Operator count\", function() {",
                          "    var jsonData = pm.response.json();",
                          "    pm.expect(jsonData.count).to.equal(10);",
                          "});",
                          "pm.test(\"Filter Operator size\", function() {",
                          "    var jsonData = pm.response.json();",
                          "    pm.expect(jsonData.hits.length).to.equal(10);",
                          "});",
                          "pm.test(\"Filter Operator values are valid\", function() {",
                          "    var jsonData = pm.response.json();",
                          "    var expected = [180263,281480,291815,352709,382741,411861,452560,673027,859730,876001];",
                          "    for (var i = 0; i < 10; ++i) {",
                          "        pm.expect(jsonData.hits[i].accountNumber).to.equal(expected[i]);",
                          "    }",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ]
                },
                {
                  "name": "Elite Set Operator",
                  "request": {
                    "method": "SEARCH",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "host": [
                        "{{domain}}"
                      ],
                      "path": [
                        "bank",
                        ""
                      ],
                      "query": [
                        {
                          "key": "volatile",
                          "value": null
                        }
                      ]
                    },
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"_query\": {\r\n    \"_elite_set\": [\r\n      { \"personality\": \"biggest\" },\r\n      { \"personality\": \"things\" },\r\n      { \"personality\": \"lovable\" },\r\n      { \"personality\": \"cooperative\" },\r\n      { \"personality\": \"course\" },\r\n      { \"personality\": \"also\" },\r\n      { \"personality\": \"kind\" },\r\n      { \"personality\": \"honest\" },\r\n      { \"personality\": \"considerate\" },\r\n      { \"personality\": \"prominent\" },\r\n      { \"personality\": \"especially\" },\r\n      { \"personality\": \"compared\" },\r\n      { \"personality\": \"impulses\" },\r\n      { \"personality\": \"shallow\" },\r\n      { \"personality\": \"well\" }\r\n    ]\r\n  },\r\n      \"_sort\": \"accountNumber\" \r\n}"
                    }
                  },
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"response is ok\", function() {",
                          "    pm.response.to.be.ok;",
                          "});",
                          "pm.test(\"Elite Set Operator count\", function() {",
                          "    var jsonData = pm.response.json();",
                          "    pm.expect(jsonData.count).to.equal(10);",
                          "});",
                          "pm.test(\"Elite Set Operator size\", function() {",
                          "    var jsonData = pm.response.json();",
                          "    pm.expect(jsonData.hits.length).to.equal(10);",
                          "});",
                          "pm.test(\"Elite Set Operator values are valid\", function() {",
                          "    var jsonData = pm.response.json();",
                          "    var expected = [100123,100481,101294,103486,103710,107465,108731,109766,112495,113400];",
                          "    for (var i = 0; i < 10; ++i) {",
                          "        pm.expect(jsonData.hits[i].accountNumber).to.equal(expected[i]);",
                          "    }",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ]
                },
                {
                  "name": "Range Searches",
                  "request": {
                    "method": "SEARCH",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "host": [
                        "{{domain}}"
                      ],
                      "path": [
                        "bank",
                        ""
                      ],
                      "query": [
                        {
                          "key": "volatile",
                          "value": null
                        }
                      ]
                    },
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"_query\": {\r\n    \"_and\": [\r\n      { \"gender\": \"female\" },\r\n      {\r\n        \"age\": {\r\n          \"_in\": {\r\n            \"_range\": {\r\n              \"_from\": 20,\r\n              \"_to\": 30\r\n            }\r\n          }\r\n        }\r\n      }\r\n    ]\r\n  },\r\n  \"_sort\": \"accountNumber\"\r\n}"
                    }
                  },
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"response is ok\", function() {",
                          "    pm.response.to.be.ok;",
                          "});",
                          "pm.test(\"Range Searches count\", function() {",
                          "    var jsonData = pm.response.json();",
                          "    pm.expect(jsonData.count).to.equal(10);",
                          "});",
                          "pm.test(\"Range Searches size\", function() {",
                          "    var jsonData = pm.response.json();",
                          "    pm.expect(jsonData.hits.length).to.equal(10);",
                          "});",
                          "pm.test(\"Range Searches values are valid\", function() {",
                          "    var jsonData = pm.response.json();",
                          "    var expected = [100123,103710,104419,109766,112573,118960,124835,130906,134887,140681];",
                          "    for (var i = 0; i < 10; ++i) {",
                          "        pm.expect(jsonData.hits[i].accountNumber).to.equal(expected[i]);",
                          "    }",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ]
                },
                {
                  "name": "Geospatial Searches",
                  "item": [
                    {
                      "name": "Geospatial Point search",
                      "request": {
                        "method": "SEARCH",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json",
                            "type": "text"
                          }
                        ],
                        "url": {
                          "host": [
                            "{{domain}}"
                          ],
                          "path": [
                            "bank",
                            ""
                          ],
                          "query": [
                            {
                              "key": "volatile",
                              "value": null
                            }
                          ]
                        },
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n  \"_query\": {\r\n    \"checkin\": {\r\n      \"_point\": {\r\n        \"_latitude\": 41.50343,\r\n        \"_longitude\": -74.01042\r\n      }\r\n    }\r\n  },\r\n  \"_sort\": \"accountNumber\"\r\n}"
                        }
                      },
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm.test(\"response is ok\", function() {",
                              "    pm.response.to.be.ok;",
                              "});",
                              "pm.test(\"Geospatial Point count\", function() {",
                              "    var jsonData = pm.response.json();",
                              "    pm.expect(jsonData.count).to.equal(10);",
                              "});",
                              "pm.test(\"Geospatial Point size\", function() {",
                              "    var jsonData = pm.response.json();",
                              "    pm.expect(jsonData.hits.length).to.equal(10);",
                              "});",
                              "pm.test(\"Geospatial Point values are valid\", function() {",
                              "    var jsonData = pm.response.json();",
                              "    var expected = [100123,100481,101121,101253,101294,103213,103486,103710,104419,107465];",
                              "    for (var i = 0; i < 10; ++i) {",
                              "        pm.expect(jsonData.hits[i].accountNumber).to.equal(expected[i]);",
                              "    }",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "Aggregations",
          "item": [
            {
              "name": "Metrics",
              "item": [
                {
                  "name": "Count",
                  "request": {
                    "method": "SEARCH",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "host": [
                        "{{domain}}"
                      ],
                      "path": [
                        "bank",
                        ""
                      ],
                      "query": [
                        {
                          "key": "volatile",
                          "value": null
                        }
                      ]
                    },
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"_query\": {\n    \"contact.state\": \"Indiana\"\n  },\n  \"_limit\": 0,\n  \"_aggs\": {\n    \"indiana_city_count\": {\n      \"_count\": {\n        \"_field\": \"contact.city\"\n      }\n    }\n  }\n}"
                    }
                  },
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"response is ok\", function() {",
                          "    pm.response.to.be.ok;",
                          "});",
                          "pm.test(\"response is aggregation\", function() {",
                          "    var jsonData = pm.response.json();",
                          "    function expectEqualNumbers(a, b) {",
                          "      pm.expect(Math.round(parseFloat(a) * 1000) / 1000).to.equal(Math.round(parseFloat(b) * 1000) / 1000);",
                          "    }",
                          "    expectEqualNumbers(jsonData.aggregations.indiana_city_count._count, 17);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ]
                },
                {
                  "name": "Sum",
                  "request": {
                    "method": "SEARCH",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "host": [
                        "{{domain}}"
                      ],
                      "path": [
                        "bank",
                        ""
                      ],
                      "query": [
                        {
                          "key": "volatile",
                          "value": null
                        }
                      ]
                    },
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"_query\": {\n    \"contact.state\": \"Indiana\"\n  },\n  \"_limit\": 0,\n  \"_aggs\": {\n    \"indiana_total_balance\": {\n      \"_sum\": {\n        \"_field\": \"balance\"\n      }\n    }\n  }\n}"
                    }
                  },
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"response is ok\", function() {",
                          "    pm.response.to.be.ok;",
                          "});",
                          "pm.test(\"response is aggregation\", function() {",
                          "    var jsonData = pm.response.json();",
                          "    function expectEqualNumbers(a, b) {",
                          "      pm.expect(Math.round(parseFloat(a) * 1000) / 1000).to.equal(Math.round(parseFloat(b) * 1000) / 1000);",
                          "    }",
                          "    expectEqualNumbers(jsonData.aggregations.indiana_total_balance._sum, 42152.87);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ]
                },
                {
                  "name": "Average",
                  "request": {
                    "method": "SEARCH",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "host": [
                        "{{domain}}"
                      ],
                      "path": [
                        "bank",
                        ""
                      ],
                      "query": [
                        {
                          "key": "volatile",
                          "value": null
                        }
                      ]
                    },
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"_query\": \"*\",\n  \"_limit\": 0,\n  \"_check_at_least\": 1000,\n  \"_aggs\": {\n    \"avg_age\": {\n      \"_avg\": {\n        \"_field\": \"age\"\n      }\n    }\n  }\n}"
                    }
                  },
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"response is ok\", function() {",
                          "    pm.response.to.be.ok;",
                          "});",
                          "pm.test(\"response is aggregation\", function() {",
                          "    var jsonData = pm.response.json();",
                          "    function expectEqualNumbers(a, b) {",
                          "      pm.expect(Math.round(parseFloat(a) * 1000) / 1000).to.equal(Math.round(parseFloat(b) * 1000) / 1000);",
                          "    }",
                          "    expectEqualNumbers(jsonData.aggregations._doc_count, 1000);",
                          "    expectEqualNumbers(jsonData.aggregations.avg_age._avg, 30.042);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ]
                },
                {
                  "name": "Min",
                  "request": {
                    "method": "SEARCH",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "host": [
                        "{{domain}}"
                      ],
                      "path": [
                        "bank",
                        ""
                      ],
                      "query": [
                        {
                          "key": "volatile",
                          "value": null
                        }
                      ]
                    },
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"_query\": \"*\",\r\n  \"_limit\": 0,\r\n  \"_check_at_least\": 1000,\r\n  \"_aggs\": {\r\n    \"min_balance\": {\r\n      \"_min\": {\r\n        \"_field\": \"balance\"\r\n      }\r\n    }\r\n  }\r\n}"
                    }
                  },
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"response is ok\", function() {",
                          "    pm.response.to.be.ok;",
                          "});",
                          "pm.test(\"response is aggregation\", function() {",
                          "    var jsonData = pm.response.json();",
                          "    function expectEqualNumbers(a, b) {",
                          "      pm.expect(Math.round(parseFloat(a) * 1000) / 1000).to.equal(Math.round(parseFloat(b) * 1000) / 1000);",
                          "    }",
                          "    expectEqualNumbers(jsonData.aggregations._doc_count, 1000);",
                          "    expectEqualNumbers(jsonData.aggregations.min_balance._min, 7.99);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ]
                },
                {
                  "name": "Max",
                  "request": {
                    "method": "SEARCH",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "host": [
                        "{{domain}}"
                      ],
                      "path": [
                        "bank",
                        ""
                      ],
                      "query": [
                        {
                          "key": "volatile",
                          "value": null
                        }
                      ]
                    },
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"_query\": \"*\",\r\n  \"_limit\": 0,\r\n  \"_check_at_least\": 1000,\r\n  \"_aggs\": {\r\n    \"max_balance\": {\r\n      \"_max\": {\r\n        \"_field\": \"balance\"\r\n      }\r\n    }\r\n  }\r\n}"
                    }
                  },
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"response is ok\", function() {",
                          "    pm.response.to.be.ok;",
                          "});",
                          "pm.test(\"response is aggregation\", function() {",
                          "    var jsonData = pm.response.json();",
                          "    function expectEqualNumbers(a, b) {",
                          "      pm.expect(Math.round(parseFloat(a) * 1000) / 1000).to.equal(Math.round(parseFloat(b) * 1000) / 1000);",
                          "    }",
                          "    expectEqualNumbers(jsonData.aggregations._doc_count, 1000);",
                          "    expectEqualNumbers(jsonData.aggregations.max_balance._max, 12699.46);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ]
                },
                {
                  "name": "Median",
                  "request": {
                    "method": "SEARCH",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "host": [
                        "{{domain}}"
                      ],
                      "path": [
                        "bank",
                        ""
                      ],
                      "query": [
                        {
                          "key": "volatile",
                          "value": null
                        }
                      ]
                    },
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"_query\": \"*\",\n  \"_limit\": 0,\n  \"_check_at_least\": 1000,\n  \"_aggs\": {\n    \"balance_median\": {\n      \"_median\": {\n        \"_field\": \"balance\"\n      }\n    }\n  }\n}"
                    }
                  },
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"response is ok\", function() {",
                          "    pm.response.to.be.ok;",
                          "});",
                          "pm.test(\"response is aggregation\", function() {",
                          "    var jsonData = pm.response.json();",
                          "    function expectEqualNumbers(a, b) {",
                          "      pm.expect(Math.round(parseFloat(a) * 1000) / 1000).to.equal(Math.round(parseFloat(b) * 1000) / 1000);",
                          "    }",
                          "    expectEqualNumbers(jsonData.aggregations._doc_count, 1000);",
                          "    expectEqualNumbers(jsonData.aggregations.balance_median._median, 2414.425);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ]
                },
                {
                  "name": "Mode",
                  "request": {
                    "method": "SEARCH",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "host": [
                        "{{domain}}"
                      ],
                      "path": [
                        "bank",
                        ""
                      ],
                      "query": [
                        {
                          "key": "volatile",
                          "value": null
                        }
                      ]
                    },
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"_query\": \"*\",\n  \"_limit\": 0,\n  \"_check_at_least\": 1000,\n  \"_aggs\": {\n    \"balance_mode\": {\n      \"_mode\": {\n        \"_field\": \"balance\"\n      }\n    }\n  }\n}"
                    }
                  },
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"response is ok\", function() {",
                          "    pm.response.to.be.ok;",
                          "});",
                          "pm.test(\"response is aggregation\", function() {",
                          "    var jsonData = pm.response.json();",
                          "    function expectEqualNumbers(a, b) {",
                          "      pm.expect(Math.round(parseFloat(a) * 1000) / 1000).to.equal(Math.round(parseFloat(b) * 1000) / 1000);",
                          "    }",
                          "    expectEqualNumbers(jsonData.aggregations._doc_count, 1000);",
                          "    expectEqualNumbers(jsonData.aggregations.balance_mode._mode, 3673.84);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ]
                },
                {
                  "name": "Extended Statistics",
                  "request": {
                    "method": "SEARCH",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "host": [
                        "{{domain}}"
                      ],
                      "path": [
                        "bank",
                        ""
                      ],
                      "query": [
                        {
                          "key": "volatile",
                          "value": null
                        }
                      ]
                    },
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"_query\": \"*\",\n  \"_limit\": 0,\n  \"_check_at_least\": 1000,\n  \"_aggs\": {\n    \"balance_stats\": {\n      \"_extended_stats\": {\n        \"_field\": \"balance\"\n      }\n    }\n  }\n}"
                    }
                  },
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"response is ok\", function() {",
                          "    pm.response.to.be.ok;",
                          "});",
                          "pm.test(\"response is aggregation\", function() {",
                          "    var jsonData = pm.response.json();",
                          "    function expectEqualNumbers(a, b) {",
                          "      pm.expect(Math.round(parseFloat(a) * 1000) / 1000).to.equal(Math.round(parseFloat(b) * 1000) / 1000);",
                          "    }",
                          "    expectEqualNumbers(jsonData.aggregations._doc_count, 1000);",
                          "    expectEqualNumbers(jsonData.aggregations.balance_stats._count, 1000);",
                          "    expectEqualNumbers(jsonData.aggregations.balance_stats._min, 7.99);",
                          "    expectEqualNumbers(jsonData.aggregations.balance_stats._max, 12699.46);",
                          "    expectEqualNumbers(jsonData.aggregations.balance_stats._avg, 2565.03304);",
                          "    expectEqualNumbers(jsonData.aggregations.balance_stats._sum, 2565033.04);",
                          "    expectEqualNumbers(jsonData.aggregations.balance_stats._sum_of_squares, 8844461934.66);",
                          "    expectEqualNumbers(jsonData.aggregations.balance_stats._variance, 2267334.7731415);",
                          "    expectEqualNumbers(jsonData.aggregations.balance_stats._std_deviation, 1505.7671709602053);",
                          "    expectEqualNumbers(jsonData.aggregations.balance_stats._std_deviation_bounds._upper, 5576.56738192041);",
                          "    expectEqualNumbers(jsonData.aggregations.balance_stats._std_deviation_bounds._lower, -446.50130192041049);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "name": "Bucket",
              "item": [
                {
                  "name": "Ordering",
                  "request": {
                    "method": "SEARCH",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "host": [
                        "{{domain}}"
                      ],
                      "path": [
                        "bank",
                        ""
                      ],
                      "query": [
                        {
                          "key": "volatile",
                          "value": null
                        }
                      ]
                    },
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"_query\": \"*\",\r\n  \"_limit\": 0,\r\n  \"_check_at_least\": 1000,\r\n  \"_aggs\": {\r\n    \"balance_by_state\": {\r\n      \"_values\": {\r\n        \"_field\": \"contact.state\",\r\n        \"_sort\": { \"max_balance_count._max\": \"asc\" }\r\n      },\r\n      \"_aggs\": {\r\n        \"max_balance_count\": {\r\n          \"_max\": {\r\n            \"_field\": \"balance\"\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
                    }
                  },
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"response is ok\", function() {",
                          "    pm.response.to.be.ok;",
                          "});",
                          "pm.test(\"response is aggregation\", function() {",
                          "    var jsonData = pm.response.json();",
                          "    var expected = [3199.28,3262.82,3308.57,3423.5,3554.94,3598.42,3630.51,3634.33,3673.84,3677.93,3736.69,3738.33,3747.21,3756.76,3769.42,3837.63,3838.83,3839.19,3856.99,3890.1,3902.81,3924.08,3929.65,3942.33,3945.77,3948.68,3960.1,3961.23,3982.79,3985.15,3985.47,3985.51,4809.86,5281.15,6691.46,6768.66,6984.37,7095.11,7129.27,7247.46,7304.17,7587.45,7659.66,7809.61,8043.18,8110.22,8881.1,8927.96,9138.89,10073.05,10087.41,10448.36,10513.99,10643.84,10663.25,10729.87,10819.51,10857.55,12699.46];",
                          "    for (var i = 0; i < 59; ++i) {",
                          "        pm.expect(jsonData.aggregations.balance_by_state[i].max_balance_count._max).to.equal(expected[i]);",
                          "    }",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ]
                },
                {
                  "name": "Filter",
                  "request": {
                    "method": "SEARCH",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "host": [
                        "{{domain}}"
                      ],
                      "path": [
                        "bank",
                        ""
                      ],
                      "query": [
                        {
                          "key": "volatile",
                          "value": null
                        }
                      ]
                    },
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"_query\": \"*\",\r\n  \"_limit\": 0,\r\n  \"_aggs\": {\r\n    \"strawberry_lovers\": {\r\n      \"_filter\": {\r\n        \"_term\": {\r\n          \"favoriteFruit\": \"strawberry\"\r\n        }\r\n      },\r\n      \"_aggs\": {\r\n        \"avg_balance\": {\r\n          \"_avg\": {\r\n            \"_field\": \"balance\"\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
                    }
                  },
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"response is ok\", function() {",
                          "    pm.response.to.be.ok;",
                          "});",
                          "pm.test(\"response is aggregation\", function() {",
                          "    var jsonData = pm.response.json();",
                          "    pm.expect(jsonData.aggregations.strawberry_lovers.avg_balance._avg).to.equal(1494.65);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ]
                },
                {
                  "name": "Values",
                  "request": {
                    "method": "SEARCH",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "host": [
                        "{{domain}}"
                      ],
                      "path": [
                        "bank",
                        ""
                      ],
                      "query": [
                        {
                          "key": "volatile",
                          "value": null
                        }
                      ]
                    },
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"_query\": \"*\",\r\n  \"_limit\": 0,\r\n  \"_check_at_least\": 1000,\r\n  \"_aggregations\": {\r\n    \"favorite_ruits\": {\r\n      \"_values\": {\r\n        \"_field\": \"favoriteFruit\",\r\n        \"_sort\": { \"_doc_count\": \"asc\" }\r\n      }\r\n    }\r\n  }\r\n}"
                    }
                  },
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"response is ok\", function() {",
                          "    pm.response.to.be.ok;",
                          "});",
                          "pm.test(\"response is aggregation\", function() {",
                          "    var jsonData = pm.response.json();",
                          "    var expect1 = ['nectarine','grapefruit','plum','blackberry','raspberry','lime','cantaloupe','pineapple','cherry','peach','avocado','blueberry','pear','orange','lemon','banana','watermelon','grape','strawberry','apple']",
                          "    var expect2 = [25,29,30,32,34,36,37,41,42,43,49,49,52,57,58,64,72,73,76,89]",
                          "    for (var i = 0; i < 20; ++i) {",
                          "      pm.expect(jsonData.aggregations.favorite_ruits[i]._doc_count).to.equal(expect2[i]);",
                          "      pm.expect(jsonData.aggregations.favorite_ruits[i]._key).to.equal(expect1[i]);",
                          "    }",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ]
                },
                {
                  "name": "Terms",
                  "request": {
                    "method": "SEARCH",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "host": [
                        "{{domain}}"
                      ],
                      "path": [
                        "bank",
                        ""
                      ],
                      "query": [
                        {
                          "key": "volatile",
                          "value": null
                        }
                      ]
                    },
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"_query\": \"*\",\r\n  \"_limit\": 0,\r\n  \"_check_at_least\": 1000,\r\n  \"_aggregations\": {\r\n    \"most_used_terms\": {\r\n      \"_terms\": {\r\n        \"_field\": \"personality\",\r\n        \"_sort\": { \"_doc_count\": \"desc\" }\r\n      }\r\n    }\r\n  }\r\n}"
                    }
                  },
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"response is ok\", function() {",
                          "    pm.response.to.be.ok;",
                          "});",
                          "pm.test(\"response is aggregation\", function() {",
                          "    var jsonData = pm.response.json();",
                          "    var expected1 = [1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,900,894,894,883,870,839,803,785,785,768,741,741,735,646,642,641,626,616,604,602,585,519,519,507,501,481,481,481,477,473,461,456,451,439,435,390,383,382,370,370,358,354,345,344,332,330,323,320,301,292,288,286,277,273,269,263,259,259,259,259,257,253,251,248,247,247,242,237,236,234,233,229,224,224,222,219,218,217,217,214,211,210,208,208,206,202,201,190,183,182,182,181,175,168,167,167,166,164,164,161,161,160,160,159,158,156,153,153,152,151,148,148,147,147,144,143,143,141,140,140,140,140,137,136,134,133,132,126,126,125,125,125,120,119,119,116,111,108,107,104,104,103,103,103,103,101,101,100,100,99,99,98,97,97,97,96,96,95,95,95,94,94,94,93,92,91,90,90,90,90,89,89,89,88,87,86,86,86,86,85,85,84,84,83,83,83,83,82,82,80,79,79,79,79,79,79,79,79,78,78,78,78,78,77,77,77,77,76,75,74,74,74,74,74,74,74,74,74,73,73,73,73,73,72,72,72,72,71,71,71,71,69,69,69,68,68,68,67,67,66,65,64,64,63,63,62,62,62,61,61,61,61,61,57,56,56,56,56,55,53,52,52,52,51,51,51,50,50,50,49,49,49,49,49,49,49,48,48,48,48,48,47,47,46,46,46,46,46,46,46,46,46,46,46,46,45,45,45,45,45,45,45,45,45,45,44,44,44,43,43,43,43,43,43,42,42,42,42,42,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,40,40,40,40,40,40,40,40,40,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,38,38,38,38,38,38,38,37,37,37,37,37,37,37,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,35,35,35,35,35,35,35,35,35,34,34,34,34,34,34,34,34,34,34,34,34,34,34,33,33,33,33,33,33,33,33,33,33,33,32,32,32,32,32,32,32,32,32,32,32,31,31,31,31,31,31,31,31,31,31,30,30,30,30,30,30,30,30,30,30,30,30,30,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,28,28,28,28,28,28,28,28,28,28,28,28,28,28,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,16,16,16,16,16,16,16,16,16,16,16,16,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,14,14,14,14,14,14,14,14,14,14,13,13,13,13,13,13,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,9,9,9,9,9,9,9,9,9,8,8,8,8,8,8,8,8,8,8,8,8,8,7,7,7,7,7,7,7,7,7,7,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
                          "    var expected2 = ['what','well','this','on','of','is','but','being','as','and','also','to','the','nature','for','though','in','a','too','fortunately','has','course','count','they\\'re','often','need','all','plenty','by','when','that','with','his','he\\'s','are','people','she\\'s','most','her','be','know','they','can','at','least','friends','things','less','it','perfect','nobody\\'s','there\\'s','there','many','much','days','whenever','traits','usually','helps','very','deal','help','focus','mixed','far','you','unfortunately','others','fact','because','will','it\\'s','lot','habits','way','cause','else','sides','like','times','just','pretty','needed','if','or','two','moods','make','especially','lesser','fair','liked','have','get','said','these','support','about','case','up','around','even','few','prominent','than','more','behaviors','you\\'ll','favorable','say','fun','personal','grievances','ruin','could','good','not','from','some','person','pleasant','blows','tainted','share','above','worst','so','ways','tip','those','tend','iceberg','complex','should','only','never','true','occasions','isn\\'t','which','kind','does','intertwined','begining','assistance','doses','both','been','an','out','open','meets','eye','desired','comforting','do','balance','first','comes','feeling','down','nothing','spoiled','smaller','frequently','check','best','that\\'s','slightly','rotten','worse','sour','mood','known','cherished','oftentimes','popular','looks','deceiving','admired','levels','balanced','annoyance','cheering','adored','while','takes','softens','assures','lighten','find','may','brighter','ruining','risk','regularly','impulses','little','characteristics','friction','willing','them','tained','ready','loved','keep','forget','beyond','supply','shorter','range','flaws','considering','personally','hard','evenings','describe','mindset','prevent','still','reach','perhaps','negatively','important','heat','easy','always','affect','see','rainy','ideal','enjoy','assumed','spirits','relift','exactly','aren\\'t','strongly','level','difficult','aspects','time','tendencies','overshadowed','greatest','don\\'t','company','mends','biggest','shines','darker','faults','character','uncomfortable','soften','sure','compared','between','top','problems','pose','loving','anything','without','superficial','sense','destructive','among','their','dynamic','thievish','multiple','bad','something','made','anticipative','dutiful','dealing','adventurous','take','petty','hope','enough','dislike','captivating','almost','sympathetic','sociable','romantic','clever','apathetic','turn','outspoken','witty','tolerant','sensitive','sadistic','ruined','persuasive','helpful','effects','doesn\\'t','disturbing','crude','barbaric','responsible','perceptive','observant','irritable','forthright','everything','dominating','decisive','deceitful','callous','possessive','freethinking','contemplative','sentimental','resourceful','obnoxious','look','disciplined','clear','uncaring','troublesome','hateful','exciting','disrespectful','trusting','somewhat','self','practical','intelligent','incisive','humorous','heroic','generous','farsighted','extreme','creative','confident','athletic','appreciative','ambitious','sharing','rational','predatory','honorable','hardworking','faithful','curious','companionably','active','vindictive','understanding','scornful','relaxed','planful','neglectful','narrow','monstrous','irrational','innovative','honest','gentle','forgiving','compassionate','charming','calm','adaptable','provocative','optimistic','methodical','intuitive','frightening','determined','amoral','surprising','spontaneous','miserable','elegant','demanding','blunt','amusing','upright','thinking','responsive','realistic','playful','patient','passionate','opportunistic','narcissistic','loyal','headed','friendly','due','disruptive','daring','considerate','childish','aspiring','stable','purposely','punctual','obsessive','dedicated','cooperative','charismatic','caring','avoided','sweet','softened','shame','reliable','pedantic','orderly','name','morbid','modest','lovable','grim','enthusiastic','energetic','courageous','whatever','warm','tends','selfless','reflective','odd','humble','flexible','endearing','discreet','disconcerting','venomous','power','pompous','lighter','leaderly','insightful','individualistic','imaginative','hungry','focused','agonizing','wise','respectful','organized','objective','mind','idealistic','gracious','earnest','devious','arrogant','º','we\\'re','pure','protective','natured','michael','incorruptible','here','evil','efficient','craziness','considered','cheerful','yet','words','us','strokes','rest','mentioning','insulting','independent','impatient','idealism','i','guess','grey','folks','egocentric','different','criminal','capable','were','strike','stating','show','pretentious','precise','pops','moments','insincere','insensitive','fast','discipline','courteous','chances','we\\'ve','sly','notice','mindedness','meeting','long','loathed','laziness','ignorant','hostile','hatred','hated','generosity','feared','enemies','encountered','devil','desperate','confidence','better','worth','sugar','start','spoil','soured','once','notorious','no','maliciousness','lurking','intentions','hostility','greed','encounters','ego','dust','conceited','coating','chance','caused','careful','appeal','who','unfriendly','unfortunate','truly','tolerance','spoils','probably','present','off','nights','negativistic','knows','itself','indulgent','happen','go','ever','ended','disorderly','disloyal','disaster','deviousness','counted','come','carelessness','back','away','small','slyness','relationship','redemption','rays','light','insincerity','incredibly','healthy','form','excitement','cynical','crassness','countered','brilliant','argumentative','any','amounts','tactless','meaningful','matters','ignorance','hate','forever','disliked','dishonesty','despised','created','crazy','courage','brutal','argumentativeness','abrasiveness','unfriendliness','shallowness','scorned','responsibility','prejudiced','negativity','modesty','inconsideration','inconsiderate','gloom','faithfulness','doom','creativity','counteracted','brutish','beast','thoughtless','shallow','reliability','really','perversions','lessened','irresponsible','irresponsibility','intelligence','imagination','greedy','gentleness','energy','empathetic','elegance','cruelty','completely','careless','again','abrasive','whole','tactlessness','skills','sentimentality','pretentiousness','organization','lazy','humor','honor','disloyalty','dishonest','discretion','cooperation','coarse','beacon','unstable','relationships','loyalty','instability','helping','hand','halt','envious','condemned','compassion','coldness','came','athleticism','aspirations','adaptability','within','redeeming','qualities','perverse','malicious','insensitivity','independence','imprudence','humbleness','gave','flexibility','farsightedness','darkness','cruel','crass','cheerfulness','charm','brilliance','ambitions','aggression','witness','warmness','treachery','sad','respect','resourcefulness','reality','precision','playfulness','patience','kept','jennifer','intolerant','indulgence','honesty','headedness','enthusiasm','earnestness','disorderliness','christopher','anger','thoughtlessness','spontaneity','selfish','order','openness','minded','leadership','grace','friendliness','envy','david','charisma','wit','treacherous','selfishness','punctuality','planning','pain','optimism','let','left','imprudent','great','curiosity','coarseness','angry','alone','smith','selflessness','prejudices','intuition','impatience','empathy','desperation','dedication','capabilities','aggressive','miller','matthew','jones','james','insight','cold','wisdom','william','thomas','taylor','realism','passion','michelle','johnson','jason','determination','companionship','anderson','robert','responsiveness','objectivity','mark','kindness','intolerance','garcia','efficiency','brown','wilson','williams','steven','martin','davis','courtesy','ryan','robinson','rivera','nicholas','kimberly','kevin','jessica','individualism','amanda','travis','timothy','susan','stephanie','moore','mary','martinez','lisa','kenneth','kelly','eric','daniel','christina','thompson','stone','reed','justin','julie','john','jeffrey','hill','baker','ashley','walker','tracy','richard','melissa','megan','maria','keith','jackson','hernandez','elizabeth','douglas','christine','brenda','bailey','amy','aaron','wright','white','scott','sarah','rachel','perez','patrick','nelson','lee','karen','joseph','jordan','jensen','harris','gregory','gardner','emily','courtney','collins','chelsea','brian','anthony','anna','allen','wood','wagner','tina','theresa','teresa','tammy','sullivan','stewart','simmons','sanchez','samantha','russell','ronald','rodriguez','perry','paul','pamela','obrien','nicole','nancy','murphy','moreno','mitchell','michele','mcdonald','marc','laura','kathleen','joshua','jill','jamie','jacob','henry','hall','gonzalez','gomez','gary','figueroa','donald','dawn','darrell','charles','carr','brandon','bradley','adams','zachary','young','woods','weaver','veronica','tyler','turner','tonya','tiffany','thornton','tara','tanner','stevens','stephen','shannon','sara','rubio','rogers','rodney','roberts','reyes','rebecca','randall','ramos','ramirez','price','pierce','phillips','peterson','peters','peter','patricia','olivia','norton','nichols','nguyen','nathan','myers','morgan','mason','lopez','linda','lewis','latoya','kyle','kristina','kim','kathy','juan','jose','jim','jeffery','isaac','hodge','heather','hayes','hansen','hannah','gordon','gonzales','glenn','gina','gilbert','gibson','george','garrett','frederick','frank','fisher','erika','edward','dylan','durham','dunn','desiree','dennis','cynthia','cunningham','craig','clark','catherine','casey','carter','carrie','caldwell','brooks','brandy','blake','black','bishop','berg','benjamin','bell','avila','austin','andrew','alvarez','zimmerman','zamora','york','yang','williamson','whitney','whitehead','wheeler','webb','watts','waters','washington','ward','vega','valerie','trujillo','trevor','tracey','torres','todd','terry','sweeney','swanson','stuart','steve','stacy','soto','sosa','solis','singleton','sims','shelly','shawn','shaw','sharon','seth','sean','schroeder','santiago','sandra','sandoval','samuel','salazar','russo','roger','rios','riley','ricky','richardson','rhodes','reynolds','renee','reilly','raymond','phelps','peggy','patterson','parker','pace','olson','oconnell','newman','neal','murray','montgomery','monica','molina','mendoza','melanie','mckinney','lucas','lowery','logan','leon','lawson','lauren','kristine','kristen','king','kelli','kayla','katherine','juarez','jonathan','jimenez','jesus','jeremy','jay','javier','jack','hughes','hines','hickman','hensley','hawkins','hamilton','griffin','gray','garza','garrison','fritz','frey','freeman','fowler','fields','farmer','esparza','duran','donovan','donna','diane','diana','derrick','derek','denise','debra','deborah','dana','cruz','corey','connie','colin','coleman','cole','clinton','claire','cathy','castillo','carlos','campbell','camacho','caitlin','burnett','buck','brittany','brent','bowers','billy','barnett','barbara','banks','atkins','armstrong','angela','andrea','alicia','alice','alexander','abigail','wolf','winters','willie','wilkinson','wilkins','wilkerson','west','wesley','wendy','welch','weiss','weeks','weber','watson','watkins','warren','warner','walton','walter','waller','wallace','vincent','villa','victoria','victor','vernon','velazquez','velasquez','vasquez','vargas','vanessa','valdez','tucker','trevino','tracie','tony','tommy','tim','theodore','terri','tanya','tami','tamara','tabitha','stokes','stevenson','stephens','steele','stark','stanley','stacey','spencer','snyder','simon','silva','sherry','sheri','shelby','sheila','sheena','shaun','shaffer','schwartz','schneider','schmidt','sawyer','sanford','sanders','sally','ruiz','roy','rowe','ross','rose','rosales','roman','rodgers','robin','robertson','roberto','rivers','rivas','rickey','richmond','richards','rhonda','reid','reginald','reeves','ray','rangel','randy','randolph','ralph','quinn','pugh','pruitt','potts','pope','pineda','philip','pham','perkins','penny','pennington','pearson','paula','parsons','page','padilla','owens','owen','ortiz','ortega','oliver','oconnor','ochoa','noah','nicholson','navarro','natalie','munoz','moyer','morse','morrison','morris','montoya','miranda','mills','miles','miguel','meza','melody','mejia','meghan','medina','mcmillan','mcmahon','mckee','mcgrath','mcgee','mccoy','mcclain','mccann','mccall','mcbride','mayo','mayer','maxwell','mathew','massey','martha','marshall','marsh','margaret','marcus','manning','mahoney','madison','mack','luna','luke','lowe','lori','lloyd','liu','lindsey','li','leroy','leblanc','le','lawrence','larson','larsen','lance','kristy','kristin','krause','kramer','knapp','klein','kirby','kidd','kerr','kent','kennedy','kendra','kemp','kelsey','katrina','katelyn','kara','kane','kaitlyn','julia','judith','jorge','jonathon','johnston','johns','johnny','joel','joe','jody','jodi','joanne','jenna','jenkins','jefferson','jasmine','jared','janet','jaime','jacqueline','jacobson','jacobs','isabella','ingram','ibarra','ian','hull','huff','huber','hubbard','howell','howard','houston','horton','horn','hooper','hood','holmes','holly','hicks','herrera','heidi','hebert','haynes','hartman','hart','harrell','harper','hardy','hanna','hampton','hammond','hale','gwendolyn','guzman','gutierrez','griffith','gregg','greer','green','graves','grant','goodman','gloria','geoffrey','gentry','gay','gamble','galvan','gabriella','gabriela','fuentes','friedman','frazier','franco','francisco','frances','forbes','flynn','flores','fleming','ferguson','felicia','faulkner','farrell','ewing','evelyn','evans','estrada','espinoza','escobar','ernest','erik','erickson','ellison','ellis','edwin','edwards','earl','dyer','dwayne','dustin','dunlap','duncan','duarte','duane','doyle','dorsey','dodson','dixon','dillon','diaz','destiny','delgado','decker','debbie','deanna','dean','day','davidson','daugherty','daryl','danny','daniels','dan','dakota','curtis','crystal','crosby','crawford','crane','cox','costa','cory','cortez','cooley','cooke','cook','conway','contreras','conrad','connor','colton','colon','cochran','clayton','clarke','cisneros','cindy','chung','christian','christensen','chris','chloe','chen','chelsey','chavez','chad','castro','cassandra','carol','carney','carlson','carl','cannon','candice','candace','cameron','caleb','caitlyn','cain','byrd','bush','burns','bullock','buckley','buchanan','bryant','bryan','brooke','brittney','bridget','brianna','brewer','brett','brendan','brandi','branch','bradshaw','brad','boyer','boyd','bowman','booth','bonilla','blackwell','blackburn','beverly','betty','beth','berry','bernard','berger','bender','becker','beck','beasley','bauer','barron','barnes','barker','barber','ball','atkinson','arroyo','arnold','ariel','arellano','april','anne','anita','angelica','angel','andrews','andre','andrade','amber','alyssa','allison','alisha','alexandria','alexa','albert','alan','aguilar','adriana','adam','abbott']",
                          "    for (var i = 0; i < 1579; ++i) {",
                          "      pm.expect(jsonData.aggregations.most_used_terms[i]._doc_count).to.equal(expected1[i]);",
                          "      pm.expect(jsonData.aggregations.most_used_terms[i]._key).to.equal(expected2[i]);",
                          "    }",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ]
                },
                {
                  "name": "Histogram",
                  "request": {
                    "method": "SEARCH",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "host": [
                        "{{domain}}"
                      ],
                      "path": [
                        "bank",
                        ""
                      ],
                      "query": [
                        {
                          "key": "volatile",
                          "value": null
                        }
                      ]
                    },
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"_query\": \"*\",\r\n  \"_limit\": 0,\r\n  \"_check_at_least\": 1000,\r\n  \"_aggs\": {\r\n    \"balances\": {\r\n      \"_histogram\": {\r\n        \"_field\": \"balance\",\r\n        \"_interval\": 1000\r\n      }\r\n    }\r\n  }\r\n}"
                    }
                  },
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"response is ok\", function() {",
                          "    pm.response.to.be.ok;",
                          "});",
                          "pm.test(\"response is aggregation\", function() {",
                          "    var jsonData = pm.response.json();",
                          "    var expected = [55,329,9,1,286,294,1,1,4,12,7,1]",
                          "    for (var i = 0; i < 12; ++i) {",
                          "      pm.expect(jsonData.aggregations.balances[i]._doc_count).to.equal(expected[i]);",
                          "    }",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ]
                },
                {
                  "name": "Range",
                  "request": {
                    "method": "SEARCH",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "host": [
                        "{{domain}}"
                      ],
                      "path": [
                        "bank",
                        ""
                      ],
                      "query": [
                        {
                          "key": "volatile",
                          "value": null
                        }
                      ]
                    },
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"_query\": \"*\",\r\n  \"_limit\": 0,\r\n  \"_check_at_least\": 1000,\r\n  \"_aggs\": {\r\n    \"balances_by_range\": {\r\n      \"_range\": {\r\n        \"_field\": \"balance\",\r\n        \"_keyed\": true,\r\n        \"_ranges\": [\r\n          { \"_to\": 2000 },\r\n          { \"_from\": 2000, \"_to\": 4000 },\r\n          { \"_from\": 4000 }\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}"
                    }
                  },
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"response is ok\", function() {",
                          "    pm.response.to.be.ok;",
                          "});",
                          "pm.test(\"response is aggregation\", function() {",
                          "    var jsonData = pm.response.json();",
                          "    pm.expect(jsonData.aggregations.balances_by_range[\"..2000.0\"][\"_doc_count\"]).to.equal(384)",
                          "    pm.expect(jsonData.aggregations.balances_by_range[\"2000.0..4000.0\"][\"_doc_count\"]).to.equal(580)",
                          "    pm.expect(jsonData.aggregations.balances_by_range[\"4000.0..\"][\"_doc_count\"]).to.equal(36)",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "Tutorials",
      "item": [
        {
          "name": "Spatial Search Tutorial",
          "item": [
            {
              "name": "Load sample data",
              "request": {
                "method": "RESTORE",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/x-ndjson",
                    "type": "text"
                  }
                ],
                "url": {
                  "host": [
                    "{{domain}}"
                  ],
                  "path": [
                    "cities",
                    ""
                  ],
                  "query": [
                    {
                      "key": "commit",
                      "value": null
                    },
                    {
                      "key": "echo",
                      "value": null
                    }
                  ]
                },
                "body": {
                  "mode": "file",
                  "file": {
                    "src": "docs/assets/cities.ndjson"
                  }
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"response is ok\", function() {",
                      "    pm.response.to.be.ok;",
                      "});",
                      "pm.test(\"response is valid\", function() {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.processed).to.be.an('number')",
                      "    pm.expect(jsonData.indexed).to.be.an('number')",
                      "    pm.expect(jsonData.total).to.be.an('number')",
                      "    pm.expect(jsonData.items).to.be.an('array')",
                      "});",
                      "pm.test(\"restore received all\", function() {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.total).to.equal(1000)",
                      "});",
                      "pm.test(\"restore processed all\", function() {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.processed).to.equal(1000)",
                      "});",
                      "pm.test(\"restore indexed all\", function() {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.indexed).to.equal(1000)",
                      "    pm.expect(jsonData.items.length).to.equal(1000);",
                      "});",
                      "pm.test(\"restore values are valid\", function() {",
                      "    var jsonData = pm.response.json();",
                      "    for (var i = 0; i < 1000; ++i) {",
                      "        pm.expect(jsonData.items[i]._id).to.equal(i + 1);",
                      "    }",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "Search near El Cerrito",
              "request": {
                "method": "SEARCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "url": {
                  "host": [
                    "{{domain}}"
                  ],
                  "path": [
                    "cities",
                    ""
                  ],
                  "query": [
                    {
                      "key": "volatile",
                      "value": null
                    }
                  ]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"_query\": {\n    \"population\": {\n      \"_in\": {\n        \"_range\": {\n          \"_from\": 100000\n        }\n      }\n    },\n    \"location\": {\n      \"_in\": {\n        \"_circle\": {\n          \"_latitude\": 37.9180233,\n          \"_longitude\": -122.3198401,\n          \"_radius\": 20000\n        }\n      }\n    }\n  },\n  \"_selector\": \"city\"\n}"
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"response is ok\", function() {",
                      "    pm.response.to.be.ok;",
                      "});",
                      "pm.test(\"response values are valid\", function() {",
                      "    var jsonData = pm.response.json();",
                      "    var expected = ['Richmond','Berkeley','Oakland','San Francisco','Vallejo'];",
                      "    for (var i = 0; i < expected.length; ++i) {",
                      "        pm.expect(jsonData.hits[i]).to.equal(expected[i]);",
                      "    }",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "Search near El Cerrito from San Francisco",
              "request": {
                "method": "SEARCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "url": {
                  "host": [
                    "{{domain}}"
                  ],
                  "path": [
                    "cities",
                    ""
                  ],
                  "query": [
                    {
                      "key": "volatile",
                      "value": null
                    }
                  ]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"_query\": {\n    \"population\": {\n      \"_in\": {\n        \"_range\": {\n          \"_from\": 100000\n        }\n      }\n    },\n    \"location\": {\n      \"_in\": {\n        \"_circle\": {\n          \"_latitude\": 37.9180233,\n          \"_longitude\": -122.3198401,\n          \"_radius\": 20000\n        }\n      }\n    }\n  },\n  \"_sort\": {\n    \"location\": {\n      \"_order\": \"asc\",\n      \"_value\": {\n        \"_point\": {\n          \"_latitude\": 37.7576171,\n          \"_longitude\": -122.5776844,\n        }\n      }\n    }\n  },\n  \"_selector\": \"city\"\n}"
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"response is ok\", function() {",
                      "    pm.response.to.be.ok;",
                      "});",
                      "pm.test(\"response values are valid\", function() {",
                      "    var jsonData = pm.response.json();",
                      "    var expected = ['San Francisco','Oakland','Richmond','Berkeley','Vallejo'];",
                      "    for (var i = 0; i < expected.length; ++i) {",
                      "        pm.expect(jsonData.hits[i]).to.equal(expected[i]);",
                      "    }",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "Search North Dakota cities and closest",
              "request": {
                "method": "SEARCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "url": {
                  "host": [
                    "{{domain}}"
                  ],
                  "path": [
                    "cities",
                    ""
                  ],
                  "query": [
                    {
                      "key": "volatile",
                      "value": null
                    }
                  ]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"_query\": {\r\n    \"location\": {\r\n      \"_in\": {\r\n        \"_circle\": {\r\n          \"_latitude\": 47.329220,\r\n          \"_longitude\": -100.395388,\r\n          \"_radius\": 328254.09\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"response is ok\", function() {",
                      "    pm.response.to.be.ok;",
                      "});",
                      "pm.test(\"Geospatial Circle count\", function() {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.count).to.equal(5);",
                      "});",
                      "pm.test(\"Geospatial Circle size\", function() {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.hits.length).to.equal(5);",
                      "});",
                      "pm.test(\"Geospatial Circle values are valid\", function() {",
                      "    var jsonData = pm.response.json();",
                      "    for (var i = 0; i < 3; ++i) {",
                      "       var lat1 = 47.329220 / 180 * Math.PI;",
                      "       var lon1 = -100.395388 / 180 * Math.PI;",
                      "       var lat2 = jsonData.hits[i].location._point._latitude / 180 * Math.PI;",
                      "       var lon2 = jsonData.hits[i].location._point._longitude / 180 * Math.PI;",
                      "       var d = Math.acos(Math.sin(lat1)*Math.sin(lat2)+Math.cos(lat1)*Math.cos(lat2)*Math.cos(lon1-lon2)) * 6371;",
                      "       pm.expect(d).to.below(328.25409);",
                      "    }",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "UUID notmet",
          "item": [
            {
              "name": "Index: notmet",
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "url": {
                  "host": [
                    "{{domain}}"
                  ],
                  "path": [
                    "test",
                    "uuids",
                    "00000000-0000-1000-8000-010000000000"
                  ],
                  "query": [
                    {
                      "key": "commit",
                      "value": null
                    },
                    {
                      "key": "echo",
                      "value": null
                    }
                  ]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"campo\": \"first\"\n}"
                }
              }
            },
            {
              "name": "Get notmet",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "url": {
                  "host": [
                    "{{domain}}"
                  ],
                  "path": [
                    "test",
                    "uuids",
                    "00000000-0000-1000-8000-010000000000"
                  ],
                  "query": [
                    {
                      "key": "volatile",
                      "value": null
                    }
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"response is ok\", function() {",
                      "    pm.response.to.be.ok;",
                      "});",
                      "pm.test(\"value is valid\", function() {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.equal('~notmet');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "GET notmet selector",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "url": {
                  "host": [
                    "{{domain}}"
                  ],
                  "path": [
                    "test",
                    "uuids",
                    "00000000-0000-1000-8000-010000000000.campo"
                  ],
                  "query": [
                    {
                      "key": "volatile",
                      "value": null
                    }
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"response is ok\", function() {",
                      "    pm.response.to.be.ok;",
                      "});",
                      "pm.test(\"selector value is valid\", function() {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.equal('first');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "GET notmet condense selector",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "url": {
                  "host": [
                    "{{domain}}"
                  ],
                  "path": [
                    "test",
                    "uuids",
                    "~notmet"
                  ],
                  "query": [
                    {
                      "key": "volatile",
                      "value": null
                    }
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"response is ok\", function() {",
                      "    pm.response.to.be.ok;",
                      "});",
                      "pm.test(\"value is valid\", function() {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.equal('~notmet');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "GET notmet selector",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "url": {
                  "host": [
                    "{{domain}}"
                  ],
                  "path": [
                    "test",
                    "uuids",
                    "~notmet.campo"
                  ],
                  "query": [
                    {
                      "key": "volatile",
                      "value": null
                    }
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"response is ok\", function() {",
                      "    pm.response.to.be.ok;",
                      "});",
                      "pm.test(\"selector value is valid\", function() {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.equal('first');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "GET notmet schema",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "url": {
                  "host": [
                    "{{domain}}"
                  ],
                  "path": [
                    "test",
                    "uuids",
                    "/"
                  ],
                  "query": [
                    {
                      "key": "volatile",
                      "value": null
                    }
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"response is ok\", function() {",
                      "    pm.response.to.be.ok;",
                      "});",
                      "pm.test(\"schema value is valid\", function() {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData._schema.schema._id._type).to.equal('uuid');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "Index: path notmet",
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "url": {
                  "host": [
                    "{{domain}}"
                  ],
                  "path": [
                    "test",
                    "uuids",
                    "00000000-0000-1000-8000-010000000000",
                    "00000000-0000-1000-8000-010000000000"
                  ],
                  "query": [
                    {
                      "key": "commit",
                      "value": null
                    },
                    {
                      "key": "echo",
                      "value": null
                    }
                  ]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"campo\": \"second\"\n}"
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"response is ok\", function() {",
                      "    pm.response.to.be.ok;",
                      "});",
                      "pm.test(\"value is valid\", function() {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.equal('~notmet');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "GET path notmet selector",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "url": {
                  "host": [
                    "{{domain}}"
                  ],
                  "path": [
                    "test",
                    "uuids",
                    "00000000-0000-1000-8000-010000000000",
                    "00000000-0000-1000-8000-010000000000.campo"
                  ],
                  "query": [
                    {
                      "key": "volatile",
                      "value": null
                    }
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"response is ok\", function() {",
                      "    pm.response.to.be.ok;",
                      "});",
                      "pm.test(\"selector value is valid\", function() {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.equal('second');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "Index: path notmet condense",
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "url": {
                  "host": [
                    "{{domain}}"
                  ],
                  "path": [
                    "test",
                    "uuids",
                    "~notmet",
                    "~notmet"
                  ],
                  "query": [
                    {
                      "key": "commit",
                      "value": null
                    },
                    {
                      "key": "echo",
                      "value": null
                    }
                  ]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"campo\": \"second\"\n}"
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"response is ok\", function() {",
                      "    pm.response.to.be.ok;",
                      "});",
                      "pm.test(\"value is valid\", function() {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.equal('~notmet');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "GET path notmet condense selector",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "url": {
                  "host": [
                    "{{domain}}"
                  ],
                  "path": [
                    "test",
                    "uuids",
                    "~notmet",
                    "~notmet.campo"
                  ],
                  "query": [
                    {
                      "key": "volatile",
                      "value": null
                    }
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"response is ok\", function() {",
                      "    pm.response.to.be.ok;",
                      "});",
                      "pm.test(\"selector value is valid\", function() {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.equal('second');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "Duplicate uuid",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "host": [
                "{{domain}}"
              ],
              "path": [
                "test",
                "schemas",
                "duplicated_uuid_field"
              ],
              "query": [
                {
                  "key": "volatile",
                  "value": null
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"_schema\": {\r\n        \"schema\": {\r\n            \"_id\": {\r\n                \"_type\": \"uuid\",\r\n            },\r\n            \"<uuid_field>\": {\r\n                \"_type\": \"keyword\",\r\n            }\r\n        }\r\n    },\r\n    \"~3pZyPcFqGq\": \"A\",\r\n    \"00000000-0000-1000-8000-c97562616c75\": \"B\",\r\n    \"urn:uuid:00000000-0000-1000-8000-c97562616c75\": \"C\",\r\n    \"{00000000-0000-1000-8000-c97562616c75}\": \"D\"\r\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"response is 404\", function() {",
                  "    pm.expect(pm.response.code).to.be.equal(404);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Check Types",
      "item": [
        {
          "name": "Index Types",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "host": [
                "{{domain}}"
              ],
              "path": [
                "test",
                "types",
                "1"
              ],
              "query": [
                {
                  "key": "commit",
                  "value": null
                },
                {
                  "key": "echo",
                  "value": null
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"positive\": {\r\n        \"_type\": \"positive\",\r\n        \"_value\": 123456\r\n    },\r\n    \"integer\": {\r\n        \"_type\": \"integer\",\r\n        \"_value\": 123456\r\n    },\r\n    \"float\": {\r\n        \"_type\": \"float\",\r\n        \"_value\": 123456\r\n    },\r\n    \"boolean\": {\r\n        \"_type\": \"boolean\",\r\n        \"_value\": true\r\n    },\r\n    \"keyword\": {\r\n        \"_type\": \"keyword\",\r\n        \"_value\": \"true\"\r\n    },\r\n    \"text\": {\r\n        \"_type\": \"text\",\r\n        \"_value\": \"this field is text\"\r\n    },\r\n    \"date\": {\r\n        \"_type\": \"date\",\r\n        \"_value\": \"2019-05-17\"\r\n    },\r\n    \"datetime\": {\r\n        \"_type\": \"datetime\",\r\n        \"_value\": \"2019-05-17T10:12:12.123\"\r\n    },\r\n    \"time\": {\r\n        \"_type\": \"time\",\r\n        \"_value\": \"10:12:12.123\"\r\n    },\r\n    \"timedelta\": {\r\n        \"_type\": \"timedelta\",\r\n        \"_value\": \"+10:12:12.123\"\r\n    },\r\n    \"uuid\": {\r\n        \"_type\": \"uuid\",\r\n        \"_value\": \"22214800-78c7-11e9-b7d0-e5256ff63dab\"\r\n    }\r\n\r\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"response is ok\", function() {",
                  "    pm.response.to.be.ok;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Check Float Type",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "host": [
                "{{domain}}"
              ],
              "path": [
                "test",
                "types",
                "/"
              ],
              "query": [
                {
                  "key": "volatile",
                  "value": null
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"response is ok\", function() {",
                  "    pm.response.to.be.ok;",
                  "});",
                  "pm.test(\"schema type is valid\", function() {",
                  "    var jsonData = pm.response.json();",
                  "    var accuracy_expected = [100,1000,10000,100000,1000000,100000000];",
                  "    pm.expect(jsonData._schema.schema['float']._type).to.equal('floating');",
                  "});",
                  "pm.test(\"accuracy is valid\", function() {",
                  "    var jsonData = pm.response.json();",
                  "    var accuracy_expected = [100,1000,10000,100000,1000000,100000000];",
                  "    for (var i = 0; i < 1000; ++i) {",
                  "        pm.expect(jsonData._schema.schema['float']._accuracy[i]).to.equal(accuracy_expected[i]);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Check Integer Type",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "host": [
                "{{domain}}"
              ],
              "path": [
                "test",
                "types",
                "/"
              ],
              "query": [
                {
                  "key": "volatile",
                  "value": null
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"response is ok\", function() {",
                  "    pm.response.to.be.ok;",
                  "});",
                  "pm.test(\"schema type is valid\", function() {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData._schema.schema['integer']._type).to.equal('integer');",
                  "});",
                  "pm.test(\"accuracy is valid\", function() {",
                  "    var jsonData = pm.response.json();",
                  "    var accuracy_expected = [100,1000,10000,100000,1000000,100000000];",
                  "    for (var i = 0; i < 1000; ++i) {",
                  "        pm.expect(jsonData._schema.schema['integer']._accuracy[i]).to.equal(accuracy_expected[i]);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Check Positive Type",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "host": [
                "{{domain}}"
              ],
              "path": [
                "test",
                "types",
                "/"
              ],
              "query": [
                {
                  "key": "volatile",
                  "value": null
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"response is ok\", function() {",
                  "    pm.response.to.be.ok;",
                  "});",
                  "pm.test(\"schema type is valid\", function() {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData._schema.schema['positive']._type).to.equal('positive');",
                  "});",
                  "pm.test(\"accuracy is valid\", function() {",
                  "    var jsonData = pm.response.json();",
                  "    var accuracy_expected = [100,1000,10000,100000,1000000,100000000];",
                  "    for (var i = 0; i < 1000; ++i) {",
                  "        pm.expect(jsonData._schema.schema['positive']._accuracy[i]).to.equal(accuracy_expected[i]);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Check Boolean Type",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "host": [
                "{{domain}}"
              ],
              "path": [
                "test",
                "types",
                "/"
              ],
              "query": [
                {
                  "key": "volatile",
                  "value": null
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"response is ok\", function() {",
                  "    pm.response.to.be.ok;",
                  "});",
                  "pm.test(\"schema type is valid\", function() {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData._schema.schema['boolean']._type).to.equal('boolean');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Check Keyword Type",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "host": [
                "{{domain}}"
              ],
              "path": [
                "test",
                "types",
                "/"
              ],
              "query": [
                {
                  "key": "volatile",
                  "value": null
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"response is ok\", function() {",
                  "    pm.response.to.be.ok;",
                  "});",
                  "pm.test(\"schema type is valid\", function() {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData._schema.schema['keyword']._type).to.equal('keyword');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Check Text Type",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "host": [
                "{{domain}}"
              ],
              "path": [
                "test",
                "types",
                "/"
              ],
              "query": [
                {
                  "key": "volatile",
                  "value": null
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"response is ok\", function() {",
                  "    pm.response.to.be.ok;",
                  "});",
                  "pm.test(\"schema type is valid\", function() {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData._schema.schema['text']._type).to.equal('text');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Check Date Type",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "host": [
                "{{domain}}"
              ],
              "path": [
                "test",
                "types",
                "/"
              ],
              "query": [
                {
                  "key": "volatile",
                  "value": null
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"response is ok\", function() {",
                  "    pm.response.to.be.ok;",
                  "});",
                  "pm.test(\"schema type is valid\", function() {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData._schema.schema['date']._type).to.equal('date');",
                  "});",
                  "pm.test(\"accuracy is valid\", function() {",
                  "    var jsonData = pm.response.json();",
                  "    var accuracy_expected = ['hour','day','month','year','decade','century'];",
                  "    for (var i = 0; i < 1000; ++i) {",
                  "        pm.expect(jsonData._schema.schema['date']._accuracy[i]).to.equal(accuracy_expected[i]);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Check Datetime Type",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "host": [
                "{{domain}}"
              ],
              "path": [
                "test",
                "types",
                "/"
              ],
              "query": [
                {
                  "key": "volatile",
                  "value": null
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"response is ok\", function() {",
                  "    pm.response.to.be.ok;",
                  "});",
                  "pm.test(\"schema type is valid\", function() {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData._schema.schema['datetime']._type).to.equal('datetime');",
                  "});",
                  "pm.test(\"accuracy is valid\", function() {",
                  "    var jsonData = pm.response.json();",
                  "    var accuracy_expected = ['hour','day','month','year','decade','century'];",
                  "    for (var i = 0; i < 1000; ++i) {",
                  "        pm.expect(jsonData._schema.schema['datetime']._accuracy[i]).to.equal(accuracy_expected[i]);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Check Time Type",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "host": [
                "{{domain}}"
              ],
              "path": [
                "test",
                "types",
                "/"
              ],
              "query": [
                {
                  "key": "volatile",
                  "value": null
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"response is ok\", function() {",
                  "    pm.response.to.be.ok;",
                  "});",
                  "pm.test(\"schema type is valid\", function() {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData._schema.schema['time']._type).to.equal('time');",
                  "});",
                  "pm.test(\"accuracy is valid\", function() {",
                  "    var jsonData = pm.response.json();",
                  "    var accuracy_expected = ['minute','hour'];",
                  "    for (var i = 0; i < 1000; ++i) {",
                  "        pm.expect(jsonData._schema.schema['time']._accuracy[i]).to.equal(accuracy_expected[i]);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Check Timedelta Type",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "host": [
                "{{domain}}"
              ],
              "path": [
                "test",
                "types",
                "/"
              ],
              "query": [
                {
                  "key": "volatile",
                  "value": null
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"response is ok\", function() {",
                  "    pm.response.to.be.ok;",
                  "});",
                  "pm.test(\"schema type is valid\", function() {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData._schema.schema['timedelta']._type).to.equal('timedelta');",
                  "});",
                  "pm.test(\"accuracy is valid\", function() {",
                  "    var jsonData = pm.response.json();",
                  "    var accuracy_expected = ['minute','hour'];",
                  "    for (var i = 0; i < 1000; ++i) {",
                  "        pm.expect(jsonData._schema.schema['timedelta']._accuracy[i]).to.equal(accuracy_expected[i]);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Check uuid Type",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "host": [
                "{{domain}}"
              ],
              "path": [
                "test",
                "types",
                "/"
              ],
              "query": [
                {
                  "key": "volatile",
                  "value": null
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"response is ok\", function() {",
                  "    pm.response.to.be.ok;",
                  "});",
                  "pm.test(\"schema type is valid\", function() {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData._schema.schema['uuid']._type).to.equal('uuid');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "domain",
      "value": "localhost:8880",
      "type": "string"
    }
  ]
}