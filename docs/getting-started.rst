===============
Getting Started
===============

Introduction
------------

Xapiand is a Highly Available Distributed RESTful Storage and Search Engine
built for the cloud and with Data Locality. Built on top of Xapian.

This document aims to be a guide to getting up and running with your first
indexing and searching document.


Installation
^^^^^^^^^^^^

Xapiand requires Xapian v1.3.2 at least, to get all features to Xapiand provides
you need install Xapian v1.3.3 the Kronuz's patched version
`<https://github.com/Kronuz/xapian>`_, there is a installation guide for this
version in the *compile_from_git.txt* file.

Once installed Xapian, install Xapiand.

Xapiand is builded under c++14 standard to compile you need clang 3.7 or higher.

From repository:
""""""""""""""""

::

   cd Xapiand
   ./autogen.sh
   ./configure
   ./make
   ./make install


Core concepts
-------------

Databases
^^^^^^^^^
*Xapian documentation*. `Read more
... <https://getting-started-with-xapian.readthedocs.org/en/latest/concepts/indexing/databases.html>`_

Documents
^^^^^^^^^
*Xapian documentation*. `Read more
... <https://getting-started-with-xapian.readthedocs.org/en/latest/concepts/indexing/documents.html>`_

Terms
^^^^^^
*Xapian documentation*. `Read more
... <https://getting-started-with-xapian.readthedocs.org/en/latest/concepts/indexing/terms.html>`_

Term Generator
^^^^^^^^^^^^^^
*Xapian documentation*. `Read more
... <https://getting-started-with-xapian.readthedocs.org/en/latest/concepts/indexing/termgenerator.html>`_

Values
^^^^^^^
*Xapian documentation*. `Read more
... <https://getting-started-with-xapian.readthedocs.org/en/latest/concepts/indexing/values.html>`_

JSON document
^^^^^^^^^^^^^
A JSON document is the basic unit of information that can be indexed. This
document is expressed in JSON (JavaScript Object Notation) which is an internet
data interchange format. A JSON document represent any schema information
that the user requiered for storage and searching.

Index
^^^^^^
An index is a collection of documents that have similar characteristics. It is
basically a Xapian database.

Endpoint
^^^^^^^^
It is the URL for some index in the cluster

Node
^^^^^
A node is a single server that is part of a cluster, and participates in
the cluster's indexing and search capacity. The node is identified by a name
which by default is generated by the *namegen* module. You could assign the name
of the node to the start the server with -n *name* option.

Cluster
^^^^^^^
A cluster is a collection of one or more nodes, the cluster holds your entire
data and provies indexing and search capacity across all the nodes. A
cluster is identified by a unique name which is given by the user with the
option --cluster *name* if there is no name given then the node is part of a
default cluster where all nodes without cluster name are joined.

Replicas
^^^^^^^^

TODO: documentation in progress ...

Running Xapiand
---------------
Once installed Xapiand to start a node use de command

::

   xapiand --cluster test

And you be able to see something like this

::

   [2015-12-10 22:36:27.089795] (==) xapiand.cc:237:
   __  __           _                 _
   \ \/ /__ _ _ __ (_) __ _ _ __   __| |
    \  // _` | '_ \| |/ _` | '_ \ / _` |
    /  \ (_| | |_) | | (_| | | | | (_| |
   /_/\_\__,_| .__/|_|\__,_|_| |_|\__,_|
             |_|  v3.0.0-alpha
   [https://github.com/Kronuz/Xapiand]
          Using Xapian v1.3.3


   ▎[2015-12-10 22:36:27.090135] (==) xapiand.cc:267: By default using Glassdatabases.
   ▎[2015-12-10 22:36:27.090246] (==) xapiand.cc:272: Database changesets set to 200.
   ▎[2015-12-10 22:36:27.090341] (==) xapiand.cc:280: Increased flush threshold to 100000 (it was originally set to 10000).
   ▎[2015-12-10 22:36:27.090513] (==) xapiand.cc:285: Changed currentworkingdirectory to /path/to/test_node/
   ▎[2015-12-10 22:36:27.093903] (==) manager.cc:473: Listening on TCP:8880 (Http), TCP:8890 (xapian v39.0), UDP:58870 (Discovery v1.0), UDP:58880 (Raft v1.0), at pid:16574...
   ▎[2015-12-10 22:36:27.094113] (==) manager.cc:475: Starting 8 server worker threads and 3 replicators.
   ▎[2015-12-10 22:36:27.123097] (==) manager.cc:502: Joining cluster test...
   ▎[2015-12-10 22:36:28.801558] (==) servers/discovery.cc:62: Advertising as Tiahar (id: 7BF7DF78C9FF27EA)...
   ▎[2015-12-10 22:36:33.926747] (S0) manager.cc:145: Node Tiahar accepted to the party!
   ▎[2015-12-10 22:36:33.927043] (S0) manager.cc:227: Joined cluster test: It is now online!


Note the option --cluster tell to Xapiand that this node belongs to *test*
cluster. Another thing to note is that the node name it was generated by Xapiand
in this case *Tiahar*, if you want to specify the name use the option -n *name*

Xapiand options
^^^^^^^^^^^^^^^

Xapiand provides several command line options

Options
"""""""

=========================== =======================================
``-d, --daemonize``         daemonize (run in background)

``--chert``                 Use chert databases

``--cluster``               Cluster name to join

``-D, --database <path>``   Node database path

``-n, --name <name>``       Node name

``-p, --pid <pidfile>``     Write PID

``-u, --uid <id>``          User ID

``-g, --gid <id>``          Group ID

``--workers <int>``         Number of worker servers

``--replicators <int>``     Number of replicators

``--committers <int>``      Number of committers

``--dbpool <int>``          Maximum of endpoints in database pool

``--http <int>``            HTTP REST API port

``--xapian <int>``          Xapian binary protocol port

``--discovery <int>``       Discovery UDP port

``--raft <int>``            Raft UDP port
=========================== =======================================


REST API
---------
The REST API is the tool that you can use to interact with your cluster.

Indexing
^^^^^^^^
To create a index only need to send a PUT request with the endpoint:

::

   curl -XPUT 'http://localhost:8880/twitter/tweet/1?pretty=1' -d '
   {
       "user": "Kronuz",
       "postDate": "2015-11-15T13:12:00",
       "message": "Trying out Xapiand, so far so good?"
   }'

In this example the endpoint is *localhost:8880/twitter/tweet*, since it is a
local test *localhost* is the ip address, the port by default is *8880* and the
*twitter/tweet* is the index created and is placed in the path working directory, to
change the path directoy, run Xapiand with ``-D`` option. The index is where
the document is stored and *1* is the id for this document, finally we have a
*pretty=1* that tell it to print a pretty JSON response.

Xapiand server will send you a HTTP response status code 200 if was successful
with a body JSON, this JSON contains a object that tell you the operation
just performed in this case a indexing with the id 1 and commit to false
(if you not specify the commit explicitly Xapiand will do it for you in a couple
seconds, this is due to Xapiand tries to be as efficient in disk writes because
of this a single commit can write several updates):

::

  {
      "index":    {
          "_id":  "1",
          "commit":   false
      }
  }


Searching
^^^^^^^^^

Let’s now retrieve that document that we just indexed, the process is very
simple, just send a GET request to the endpoint with a query:

::

   curl -XGET
  'http://localhost:8880/twitter/tweet/_search?q=user:Kronuz&pretty=true'

Note the endpoint is still the same, but the *_search* replace the *1* in the
above request, well this part can be essentially an identifier or an operation,
*_search* indicates the operation that we are going to do.

You could think that the tricky part is the query, but is fairly simple too.
*q=user:Kronuz* is just **Find the documents with the field user equals to
Kronuz**.

And there you have it:

::

   {
       "user": "Kronuz",
       "postDate": "2015-11-15T13:12:00",
       "message":  "Trying out Xapiand, so far so good?",
       "_id":  "1"
   }

Delete document
^^^^^^^^^^^^^^^
For delete a document just send a DELETE request with the endpoint and de
document id:

::

   curl -XDELETE 'http://localhost:8880/twitter/tweet/1'

So far if we look close the requests, they have a pattern and this is the
request API format to communicate with Xapiand:

::

   curl -X<HTTP method> <ip>:<port>/<index>/<id>|<operation>/?<query>


Modifying/Replacing Documents
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
If you are following the above request reindex the document that just deleted,
now for modify data is enough with reindex the document with the updated field:

::

   curl -XPUT 'http://localhost:8880/twitter/tweet/1?pretty=1' -d '
      {
          "user": "YosefMac",
          "postDate": "2015-11-15T13:12:00",
          "message": "New Message with new user for the document 1"
      }'


Note that only are updating fields, if you need replace the field for other, you
need use a patch request: