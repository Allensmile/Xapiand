===============
Getting Started
===============

Introduction
------------

Xapiand is a Highly Available Distributed RESTful Storage and Search Engine
built for the cloud and with Data Locality. Built on top of Xapian.

This document aims to be a guide to getting up and running with your first
indexing and searching document.


Installation
^^^^^^^^^^^^

Xapiand requires Xapian v1.3.2 at least, to get all features to Xapiand provides
you need install Xapian v1.3.3 the Kronuz's patched version
`<https://github.com/Kronuz/xapian>`_, there is a installation guide for this
version in the *compile_from_git.txt* file.

Once installed Xapian, install Xapiand.

Xapiand is builded under c++14 standard to compile you need clang 3.7 or higher.
If you use GCC need 5.1 or higher.

From repository:
""""""""""""""""

::

   cd Xapiand
   ./autogen.sh
   ./configure
   ./make
   ./make install


Core concepts
-------------

Databases
^^^^^^^^^
*Xapian documentation*. `Read more
... <https://getting-started-with-xapian.readthedocs.org/en/latest/concepts/indexing/databases.html>`_

Documents
^^^^^^^^^
*Xapian documentation*. `Read more
... <https://getting-started-with-xapian.readthedocs.org/en/latest/concepts/indexing/documents.html>`_

Terms
^^^^^^
*Xapian documentation*. `Read more
... <https://getting-started-with-xapian.readthedocs.org/en/latest/concepts/indexing/terms.html>`_

Term Generator
^^^^^^^^^^^^^^
*Xapian documentation*. `Read more
... <https://getting-started-with-xapian.readthedocs.org/en/latest/concepts/indexing/termgenerator.html>`_

Values
^^^^^^^
*Xapian documentation*. `Read more
... <https://getting-started-with-xapian.readthedocs.org/en/latest/concepts/indexing/values.html>`_

JSON document
^^^^^^^^^^^^^
A JSON document is the basic unit of information that can be indexed. This
document is expressed in JSON (JavaScript Object Notation) which is an internet
data interchange format. A JSON document represent any schema information
that the user requiered for storage and searching.

Index
^^^^^^
An index is a collection of documents that have similar characteristics. It is
basically a Xapian database.

Endpoint
^^^^^^^^
It is the URL for some index in the cluster

Node
^^^^^
A node is a single server that is part of a cluster, and participates in
the cluster's indexing and search capacity. The node is identified by a name
which by default is generated by the *namegen* module. You could assign the name
of the node to the start the server with -n *name* option.

Cluster
^^^^^^^
A cluster is a collection of one or more nodes, the cluster holds your entire
data and provies indexing and search capacity across all the nodes. A
cluster is identified by a unique name which is given by the user with the
option --cluster *name* if there is no name given then the node is part of a
default cluster where all nodes without cluster name are joined.

Replicas
^^^^^^^^

TODO: documentation in progress ...

Running Xapiand
---------------
Once installed Xapiand to start a node use de command

::

   xapiand --cluster test


Xapiand by default filtered out the logs, you can control the log level that you
wanna see in the console with the option ``--verbosity=level``, where level can
be set 1 to 3

The verbosity can be set to ``1`` if you want the notice logs that show the
server configuration. Set to ``2`` if you want the see the some events coming up
and set to ``3`` if you want be able to see the debug messages.

This is an example of setting the log level to 2:

::

    xapiand --cluster test --verbosity=2

And you be able to see something like this

::

    ▍[2016-03-16T16:34:58.993068] (===): Xapiand started.
    ▎[2016-03-16T16:34:58.992175] (===):

      __  __           _                 _
      \ \/ /__ _ _ __ (_) __ _ _ __   __| |
       \  // _` | '_ \| |/ _` | '_ \ / _` |
       /  \ (_| | |_) | | (_| | | | | (_| |
      /_/\_\__,_| .__/|_|\__,_|_| |_|\__,_|
                |_|  v3.0.0-alpha1
       [https://github.com/Kronuz/Xapiand]
              Using Xapian v1.3.4


    ▍[2016-03-16T16:34:58.993463] (===): Changed current working directory to /Users/yosef/Downloads/Xapiand/nodo1
    ▎[2016-03-16T16:34:58.993193] (===): Using Glass databases by default.
    ▍[2016-03-16T16:34:59.000814] (===) [0x61e00000a898]: Node IP address is 10.0.1.14 on interface en0
    ▍[2016-03-16T16:34:59.001407] (===) [0x61e00000a898]: Listening on TCP:8880 (HTTP v1.1), TCP:8890 (xapian v39.0), UDP:58870 (Discovery v1.0), UDP:58880 (Raft v1.0), at pid:39259 ...
    ▍[2016-03-16T16:34:59.003028] (===) [0x61e00000a898]: Started 16 servers, 100 worker threads, 10 replicators, 10 autocommitters
    ▎[2016-03-16T16:34:58.993257] (===): Increased flush threshold to 100000 (it was originally set to 10000).
    ▎[2016-03-16T16:34:59.002971] (===) [0x61e00000a898]: Joining cluster test...
    ▎[2016-03-16T16:34:59.098527] (===) [0x61600000e498]: Advertising as Gaelquiriaw (id: 3EC6F8016154E680)...
    ▎[2016-03-16T16:34:59.453758] (S00) [0x61e00000a898]: Node Gaelquiriaw accepted to the party!
    ▍[2016-03-16T16:34:59.453990] (S00) [0x61e00000a898]: Joined cluster test: It is now online!
    ▎[2016-03-16T16:34:59.455132] (S09) [0x615000008f18]: Node Gaelquiriaw joined the party on ip:10.0.1.14, tcp:8880 (http), tcp:8890 (xapian)! (1)


Note the option ``--cluster`` tell to Xapiand that this node belongs to *test*
cluster. Another thing to note is that the node name it was generated by Xapiand
in this case *Gaelquiriaw*, if you want to specify the name use the option
``--name`` *name*

Xapiand options
^^^^^^^^^^^^^^^

Xapiand provides several command line options

Options
"""""""

==================================  =======================================

``--chert``                         Use chert databases

``--committers <committers>``       Number of committers.

``--cluster <cluster>``             Cluster name to join

``-d,  --detach``                   Detach process. (run in background)

``-D <path>,  --database <path>``   Path to the root of the node

``--dbpool <size>``                 Maximum number of databases in database pool

``--discovery <port>``              Discovery UDP port number to listen on

``--dgroup <group>``                Discovery UDP group name

``--gid <gid>``                     Group ID

``--http <port>``                   TCP HTTP port number to listen on for

``-h,  --help``                     Displays usage information and exits

``-L <file>,  --logfile <file>``    Save logs in <file>

``--name <node>``                   Node name

``-P <file>,  --pidfile <file>``    Save PID in <file>

``--raft <port>``                   Raft UDP port number to listen on

``--rgroup <group>``                Raft UDP group name.

``--replicators <replicators>``     Number of replicators

``--solo``                          Run solo indexer. (no replication or discovery)

``-v,  --verbose``                  Increase verbosity. (accepted multiple times)

``--verbosity <verbosity>``         Set verbosity.

``--version``                       Displays version information and exits

``--workers <threads>``             Number of worker servers

``--xapian <port>``                 Xapian binary protocol TCP port number to listen on

==================================  =======================================


REST API
---------
The REST API is the tool that you can use to interact with your cluster.

Indexing
^^^^^^^^
To create a index only need to send a PUT request with the endpoint:

::

   curl -XPUT 'http://localhost:8880/twitter/tweet/1?pretty=1' -d '
   {
       "user": "Kronuz",
       "postDate": "2015-11-15T13:12:00",
       "message": "Trying out Xapiand, so far so good?"
   }'

In this example the endpoint is ``localhost:8880/twitter/tweet``, since it is a
local test *localhost* is the ip address, the port by default is ``8880`` and
the ``twitter/tweet`` is the index created and is placed in the path working
directory, to change the path directoy, run Xapiand with ``-D`` option. The
index is where the document is stored and ``1`` is the id for this document,
finally we have a ``pretty=1`` that tell it to print a pretty JSON response.

Xapiand server will send you a HTTP response status code 200 if was successful
with a body JSON, this JSON contains a object that tell you the operation
just performed in this case a indexing with the id 1 (if you not specify the
commit explicitly Xapiand will do it for you in a few seconds, this is due to
Xapiand tries to be as efficient in disk writes because
of this a single commit can write several updates):

::

  {
      "index":    {
          "_id":  "1",
      }
  }


Searching
^^^^^^^^^

Let’s now retrieve that document that we just indexed, the process is very
simple, just send a GET request to the endpoint with a query:

::

   curl -XGET
  'http://localhost:8880/twitter/tweet/_search?q=user:Kronuz&pretty=true'

Note the endpoint is still the same, but the ``_search`` replace the ``1`` in
the above request, well this part can be essentially an identifier or an
operation, ``_search`` indicates the operation that we are going to do.

You could think that the tricky part is the query, but is fairly simple too.
``q=user:Kronuz`` is just **Find the documents with the field user equals to
Kronuz**.

And there you have it:

::

   {
       "user": "Kronuz",
       "postDate": "2015-11-15T13:12:00",
       "message":  "Trying out Xapiand, so far so good?",
       "_id":  "1"
   }

Delete document
^^^^^^^^^^^^^^^
For delete a document just send a DELETE request with the endpoint and de
document id:

::

   curl -XDELETE 'http://localhost:8880/twitter/tweet/1'

So far if we look close the requests, they have a pattern and this is the
request API format to communicate with Xapiand:

::

   curl -X<HTTP method> <ip>:<port>/<index>/<id>|<operation>/?<query>


Modifying/Replacing Documents
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
If you are following the above request reindex the document that just deleted,
now for modify data is enough with reindex the document with the updated field:

::

   curl -XPUT 'http://localhost:8880/twitter/tweet/1?pretty=1' -d '
      {
          "user": "YosefMac",
          "postDate": "2015-11-15T13:12:00",
          "message": "New Message with new user for the document 1"
      }'


Note that only are updating fields, if you need replace the field for other, you
need use a patch request: