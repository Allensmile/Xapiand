#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
:author: Dubalu LLC Team.
:copyright: Copyright (C) 2018 Dubalu LLC. All rights reserved.
:license: MIT License

This is a script aimed ot strees out Xapiand

$ python fortune.py
"""
from __future__ import absolute_import, unicode_literals, print_function

import os
import sys
import signal
from multiprocessing import Pool
import re

sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'python')))

TASKS = 100000
WORKERS = 200

DEFAULT_HOST = '127.0.0.1'
DEFAULT_PORT = 8880
NUM_DATABASES = 20
NUM_HOSTS = 1

FIELD = 'fortune'


class Args:
    def __init__(self, **kwargs):
        self.__dict__.update(kwargs)


def _task(args):
    offset = args.start

    import time
    import random
    import msgpack
    import requests

    errors = {
        'put': {
            'ValueError': "v",
            'KeyError': "y",
            'BadResponse': "x",
            'ConnectionError': "c",
            'ProxyError': "p",
            'SSLError': "l",
            'Timeout': "t",
            'ConnectTimeout': "t",
            'ReadTimeout': "t",
            'URLRequired': "u",
            'TooManyRedirects': "m",
            'MissingSchema': "h",
            'InvalidSchema': "h",
            'InvalidURL': "u",
            'InvalidHeader': "h",
            'ChunkedEncodingError': "k",
            'ContentDecodingError': "n",
            'StreamConsumedError': "s",
            'RetryError': "r",
            'UnrewindableBodyError': "b",
            'RequestsWarning': "w",
            'FileModeWarning': "f",
            'RequestsDependencyWarning': "d",
            'Exception': "e",
        },
        'get': {
            'ValueError': "V",
            'KeyError': "Y",
            'BadResponse': "X",
            'ConnectionError': "C",
            'ProxyError': "P",
            'SSLError': "L",
            'Timeout': "T",
            'ConnectTimeout': "T",
            'ReadTimeout': "T",
            'URLRequired': "U",
            'TooManyRedirects': "M",
            'MissingSchema': "H",
            'InvalidSchema': "H",
            'InvalidURL': "U",
            'InvalidHeader': "H",
            'ChunkedEncodingError': "K",
            'ContentDecodingError': "N",
            'StreamConsumedError': "S",
            'RetryError': "R",
            'UnrewindableBodyError': "B",
            'RequestsWarning': "W",
            'FileModeWarning': "F",
            'RequestsDependencyWarning': "W",
            'Exception': "E",
        }
    }

    class Check(object):
        def __init__(self, err):
            self.err = err
            self.dne = "."
            self.ok = " "

        def __enter__(self):
            return self

        def __exit__(self, exc_type, exc_val, exc_tb):
            if self.err:
                if exc_type is None:
                    if self.ok:
                        sys.stderr.write(self.ok)
                else:
                    if issubclass(exc_type, ValueError):
                        sys.stderr.write(self.err['ValueError'])
                    elif issubclass(exc_type, KeyError):
                        sys.stderr.write(self.err['KeyError'])
                    elif issubclass(exc_type, requests.exceptions.HTTPError):
                        if exc_val.response is None:
                            sys.stderr.write(self.err['BadResponse'])
                        else:
                            content = msgpack.loads(exc_val.response.content)
                            message = content.get('#message', [content])[0]
                            print('\n{}: {}'.format(exc_val, message))
                    elif issubclass(exc_type, requests.exceptions.ConnectionError):
                        # (RequestException)
                        sys.stderr.write(self.err['ConnectionError'])
                    elif issubclass(exc_type, requests.exceptions.ProxyError):
                        # (ConnectionError)
                        sys.stderr.write(self.err['ProxyError'])
                    elif issubclass(exc_type, requests.exceptions.SSLError):
                        # (ConnectionError)
                        sys.stderr.write(self.err['SSLError'])
                    elif issubclass(exc_type, requests.exceptions.Timeout):
                        # (RequestException)
                        sys.stderr.write(self.err['Timeout'])
                    elif issubclass(exc_type, requests.exceptions.ConnectTimeout):
                        # (ConnectionError, Timeout)
                        sys.stderr.write(self.err['ConnectTimeout'])
                    elif issubclass(exc_type, requests.exceptions.ReadTimeout):
                        # (Timeout)
                        sys.stderr.write(self.err['ReadTimeout'])
                    elif issubclass(exc_type, requests.exceptions.URLRequired):
                        # (RequestException)
                        sys.stderr.write(self.err['URLRequired'])
                    elif issubclass(exc_type, requests.exceptions.TooManyRedirects):
                        # (RequestException)
                        sys.stderr.write(self.err['TooManyRedirects'])
                    elif issubclass(exc_type, requests.exceptions.MissingSchema):
                        # (RequestException, ValueError)
                        sys.stderr.write(self.err['MissingSchema'])
                    elif issubclass(exc_type, requests.exceptions.InvalidSchema):
                        # (RequestException, ValueError)
                        sys.stderr.write(self.err['InvalidSchema'])
                    elif issubclass(exc_type, requests.exceptions.InvalidURL):
                        # (RequestException, ValueError)
                        sys.stderr.write(self.err['InvalidURL'])
                    elif issubclass(exc_type, requests.exceptions.InvalidHeader):
                        # (RequestException, ValueError)
                        sys.stderr.write(self.err['InvalidHeader'])
                    elif issubclass(exc_type, requests.exceptions.ChunkedEncodingError):
                        # (RequestException)
                        sys.stderr.write(self.err['ChunkedEncodingError'])
                    elif issubclass(exc_type, requests.exceptions.ContentDecodingError):
                        # (RequestException, BaseHTTPError)
                        sys.stderr.write(self.err['ContentDecodingError'])
                    elif issubclass(exc_type, requests.exceptions.StreamConsumedError):
                        # (RequestException, TypeError)
                        sys.stderr.write(self.err['StreamConsumedError'])
                    elif issubclass(exc_type, requests.exceptions.RetryError):
                        # (RequestException)
                        sys.stderr.write(self.err['RetryError'])
                    elif issubclass(exc_type, requests.exceptions.UnrewindableBodyError):
                        # (RequestException)
                        sys.stderr.write(self.err['UnrewindableBodyError'])
                    elif issubclass(exc_type, requests.exceptions.RequestsWarning):
                        # (Warning)
                        sys.stderr.write(self.err['RequestsWarning'])
                    elif issubclass(exc_type, requests.exceptions.FileModeWarning):
                        # (RequestsWarning, DeprecationWarning)
                        sys.stderr.write(self.err['FileModeWarning'])
                    elif issubclass(exc_type, requests.exceptions.RequestsDependencyWarning):
                        # (RequestsWarning)
                        sys.stderr.write(self.err['RequestsDependencyWarning'])
                    elif issubclass(exc_type, client.DoesNotExist):
                        if self.dne:
                            sys.stderr.write(self.dne)
                    else:
                        sys.stderr.write(self.err['Exception'])
                return True

    indexed = []
    while offset < args.end:
        now = time.time()
        client = random.choice(args.clients)
        op = random.choice(args.ops)
        with Check(errors[op]) as check:
            if op == 'put':
                fortune = args.fortune()
                body = {
                    FIELD: fortune,
                }
                offset += 1
                fortune_id = '{}'.format(offset)
                db = random.choice(args.databases)
                client.put(db, body, fortune_id)
                indexed.append((db, fortune_id, fortune, now))
            elif op == 'get':
                if not indexed:
                    check.err = None
                    continue
                db, fortune_id, fortune, epoch = random.choice(indexed)
                if now < epoch + 5:
                    check.err = None
                    continue
                elif now < epoch + 25:
                    check.dne = "⋅"
                elif now < epoch + 50:
                    check.dne = "･"
                elif now < epoch + 75:
                    check.dne = "∘"
                elif now < epoch + 100:
                    check.dne = "∙"
                elif now < epoch + 125:
                    check.dne = "●"
                elif now < epoch + 150:
                    check.dne = "⚈"
                elif now < epoch + 175:
                    check.dne = "⧳"
                elif now < epoch + 200:
                    check.dne = "▇"
                body = client.get(db, fortune_id)
                if body[FIELD] != fortune:
                    raise ValueError
            else:
                check.err = None
                continue

    # while indexed:
    #     time.sleep(1)
    #     new_indexed = []
    #     for db, fortune_id, fortune, epoch in indexed:
    #         client = random.choice(args.clients)
    #         with Check(errors['get']) as check:
    #             check.ok = ""
    #             try:
    #                 body = client.get(db, fortune_id)
    #                 if body[FIELD] != fortune:
    #                     raise ValueError
    #             except client.DoesNotExist:
    #                 new_indexed.append((db, fortune_id, fortune, epoch))
    #     indexed = new_indexed


def task(args):
    try:
        _task(args)
    except Exception:
        import traceback
        traceback.print_exc()
        raise


def main():
    hosts = []
    databases = []
    start = 0
    tasks = TASKS
    workers = WORKERS
    try:
        # "10000-20000/200"  "10000/200" "127.0.0.1:8880" ":8881" ":8882-8883" "fortune.0-20"
        for arg in sys.argv[1:]:
            if arg in ("-h", "--help"):
                raise ValueError("Help!")
            m = re.match(r'^(\d+)?(?:-(\d+)?)(?:/(\d+))?$', arg)
            if m and any(m.groups()):
                if m.group(2):
                    start = int(m.group(1) or start)
                    tasks = int(m.group(2) or tasks) - start
                    if tasks < 0:
                        print("ERROR: When using a range for tasks the start value must be smaller!", file=sys.stderr)
                        raise ValueError("Invalid!")
                else:
                    tasks = int(m.group(1) or tasks)
                workers = int(m.group(3) or workers)
                continue
            m = re.match(r'^((?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))?(?::(\d+)(?:-(\d+))?)?$', arg)
            if m and any(m.groups()):
                ip = m.group(1) or DEFAULT_HOST
                port1 = int(m.group(2) or 8880)
                port2 = int(m.group(3) or port1)
                hosts += [(ip, port) for port in range(port1, port2 + 1)]
                continue
            m = re.match(r'^([^.]+)?(?:\.(\d+)(?:-(\d+))?)?$', arg)
            if m and any(m.groups()):
                db = m.group(1) or 'fortune'
                n1 = int(m.group(2) or DEFAULT_PORT)
                n2 = int(m.group(3) or n1)
                databases += ["{}.{}".format(db, n) for n in range(n1, n2 + 1)]
                databases = databases
                continue
            databases += [arg]
    except Exception:
        print((
            "usage: {fortune} [options...]\n"
            "\n"
            "options:\n"
            "  tasks/workers         set number of tasks and number of worker\n"
            "                        threads. default is {TASKS}/{WORKERS}\n"
            "  ip[:port1[-port2]]    add ip with port or range of ip with ports\n"
            "  dbname[.num1[-num2]]  add database or range of databases\n"
            "\n"
            "example:\n"
            "  The following starts {NUM_DATABASES} worker threads to index {TASKS} elements to\n"
            "  {NUM_DATABASES} databases in a range of {NUM_HOSTS} ports in the address {DEFAULT_HOST}\n"
            "  (this is also the default):\n"
            "    {fortune} {TASKS}/{WORKERS} fortune.0-{NUM_DATABASES} {DEFAULT_HOST}:{DEFAULT_PORT}-{last_port}\n"
        ).format(
            fortune=sys.argv[0],
            last_port=DEFAULT_PORT + NUM_HOSTS - 1,
            **globals()
        ), file=sys.stderr)
        sys.exit(64)

    hosts = hosts or [(DEFAULT_HOST, DEFAULT_PORT + i) for i in range(NUM_HOSTS)]
    databases = databases or ['fortune.{}'.format(i) for i in range(NUM_DATABASES)]

    # ops = ['get', 'put', 'put', 'put']  # 25% of the time it's a get
    ops = ['get', 'get', 'put', 'put']  # 50% of the time it's a get
    # ops = ['get', 'get', 'get', 'put']  # 75% of the time it's a get

    from xapiand import Xapiand
    clients = []
    for host, port in hosts:
        clients.append(Xapiand(host=host, port=port))

    try:
        import fortunate
    except ImportError:
        print("You need to install 'fortunate' package:\nUse: pip install fortunate", file=sys.stderr)
        sys.exit(70)
    fortune = fortunate.Fortunate()
    fortune()

    def init_worker():
        signal.signal(signal.SIGINT, signal.SIG_IGN)

    try:
        if workers:
            tpw = tasks / workers
            jobs = []
            for i in range(workers):
                jobs.append(Args(
                    start=start + i * tpw,
                    end=start + i * tpw + tpw,
                    ops=ops,
                    clients=clients,
                    databases=databases,
                    fortune=fortune,
                ))
            pool = Pool(workers, init_worker)
            pool.map_async(task, jobs).wait(1000000)
        else:
            task(Args(
                start=start,
                end=tasks,
                ops=ops,
                clients=clients,
                databases=databases,
                fortune=fortune,
            ))
    except KeyboardInterrupt:
        pool.terminate()
        pool.join()

if __name__ == '__main__':
    main()
