#!/usr/bin/python
from __future__ import print_function

# This is a simple port-forward / proxy, written using only the default python
# library. If you want to make a suggestion or fix something you can contact-me
# at voorloop_at_gmail.com
# Distributed over IDC(I Don't Care) license
import socket
import select
import time
import sys
import os

# Changing the buffer_size and delay, you can improve the speed and bandwidth.
# But when buffer get to high or delay go too down, you can broke things
buffer_size = 4194304
delay = 0.0001

RECEIVING = 0
SENDING = 1


NO_COL = "\033[0m"
BLACK = "\033[0;30m"
GREY = "\033[0;37m"
RED = "\033[0;31m"
GREEN = "\033[0;32m"
YELLOW = "\033[0;33m"
BLUE = "\033[0;34m"
MAGENTA = "\033[0;35m"
CYAN = "\033[0;36m"
DARK_GREY = "\033[1;30m"
BRIGHT_RED = "\033[1;31m"
BRIGHT_GREEN = "\033[1;32m"
BRIGHT_YELLOW = "\033[1;33m"
BRIGHT_BLUE = "\033[1;34m"
BRIGHT_MAGENTA = "\033[1;35m"
BRIGHT_CYAN = "\033[1;36m"
WHITE = "\033[1;37m"


def colorize(color, string):
    if color:
        return "%s%s%s" % (color, string, NO_COL)
    else:
        return string


def colorizer(color):
    def _colorizer(string):
        return colorize(color, string)
    return _colorizer
black = colorizer(BLACK)
grey = colorizer(GREY)
red = colorizer(RED)
green = colorizer(GREEN)
yellow = colorizer(YELLOW)
blue = colorizer(BLUE)
magenta = colorizer(MAGENTA)
cyan = colorizer(CYAN)
darkgrey = colorizer(DARK_GREY)
lightred = colorizer(BRIGHT_RED)
lightgreen = colorizer(BRIGHT_GREEN)
lightyellow = colorizer(BRIGHT_YELLOW)
lightblue = colorizer(BRIGHT_BLUE)
lightmagenta = colorizer(BRIGHT_MAGENTA)
lightcyan = colorizer(BRIGHT_CYAN)
white = colorizer(WHITE)


def register(name, default=False):
    def _register(cls):
        if name in register.classes:
            raise NameError("Name %s already registered" % name)
        register.classes[name] = cls
        if default:
            register.classes[None] = cls
        return cls
    return _register
register.classes = {}


def decode_length(buf, check=False):
    size = 0
    try:
        length = buf[0]
    except IndexError:
        raise ValueError("Bad encoded length: insufficient data")
    buf = buf[1:]
    size += 1
    if length == b'\xff':
        length = 0
        shift = 0
        sz = 0
        for ch in buf:
            ch = ord(ch)
            length |= (ch & 0x7f) << shift
            shift += 7
            sz += 1
            if ch & 0x80:
                break
        else:
            raise ValueError("Bad encoded length: insufficient data")
        length += 255
        buf = buf[sz:]
        size += sz
    else:
        length = ord(length)
    if check and len(buf) < length:
        raise ValueError("Bad encoded length: insufficient data")
    return length, size, buf[length:]


def decode_string(buf):
    length, size, new_buf = decode_length(buf, True)
    msg_length, msg_body = buf[:size], buf[size:size + length]
    return length, msg_length, msg_body, new_buf


class Forward(object):
    def __init__(self):
        self.forward = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    def start(self, host, port):
        try:
            self.forward.connect((host, port))
            return self.forward
        except Exception, e:
            print(e)
            return False


class ProxyServer(object):
    input_list = []
    channel = {}

    def __init__(self, forward_from, forward_to):
        self.server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        self.server.bind(forward_from)
        self.server.listen(200)
        self.forward_to = forward_to
        self.forward_from = forward_from

    def main_loop(self):
        self.input_list.append(self.server)
        while 1:
            time.sleep(delay)
            ss = select.select
            inputready, outputready, exceptready = ss(self.input_list, [], [])
            for self.s in inputready:
                if self.s == self.server:
                    self._on_accept()
                    break
                self.data = self.s.recv(buffer_size)
                if len(self.data) == 0:
                    self._on_close()
                    break
                else:
                    self._on_send_recv()

    def get_args(self, s):
        out, direction = self.channel[s]
        forward_from, forward_to = (out, s) if direction else (s, out)
        from_client, from_peer = forward_from.getpeername()[1], forward_from.getsockname()[1]
        to_client, to_peer = forward_to.getsockname()[1], forward_to.getpeername()[1]
        return out, from_client, from_peer, to_client, to_peer, direction

    def _on_accept(self):
        forward = Forward().start(self.forward_to[0], self.forward_to[1])
        clientsock, clientaddr = self.server.accept()
        if forward:
            self.input_list.append(clientsock)
            self.input_list.append(forward)
            self.channel[clientsock] = (forward, RECEIVING)
            self.channel[forward] = (clientsock, SENDING)
            out, from_client, from_peer, to_client, to_peer, direction = self.get_args(clientsock)
            self.on_accept(from_client, from_peer, to_client, to_peer, direction)
        else:
            print("Can't establish connection with remote server.", end="")
            print("Closing connection with client side", clientaddr)
            clientsock.close()

    def _on_close(self):
        out, from_client, from_peer, to_client, to_peer, direction = self.get_args(self.s)
        self.on_close(from_client, from_peer, to_client, to_peer, direction)
        # remove objects from input_list
        self.input_list.remove(self.s)
        self.input_list.remove(self.channel[self.s][0])
        out = self.channel[self.s][0]
        # close the connection with client
        self.channel[out][0].close()  # equivalent to do self.s.close()
        # close the connection with remote server
        self.channel[self.s][0].close()
        # delete both objects from channel dict
        del self.channel[out]
        del self.channel[self.s]

    def _on_send_recv(self):
        # here we can parse and/or modify the data before send forward
        out, from_client, from_peer, to_client, to_peer, direction = self.get_args(self.s)
        op = self.on_send if direction else self.on_recv
        data = op(self.data, from_client, from_peer, to_client, to_peer, direction)
        if data is None:
            data = self.data
        if data:
            out.send(data)

    def on_accept(self, from_client, from_peer, to_client, to_peer, direction):
        raise NotImplementedError

    def on_send(self, data, from_client, from_peer, to_client, to_peer, direction):
        raise NotImplementedError

    def on_recv(self, data, from_client, from_peer, to_client, to_peer, direction):
        raise NotImplementedError

    def on_close(self, from_client, from_peer, to_client, to_peer, direction):
        raise NotImplementedError

    def print(self, from_client, msg):
        if isinstance(msg, tuple):
            args = msg[1:]
            msg = msg[0]
        else:
            args = ()
        print("%10s - %s" % (cyan(from_client), msg), *args)


@register('raw', default=True)
class RawProxyServer(ProxyServer):
    reads = {}

    def on_accept(self, from_client, from_peer, to_client, to_peer, direction):
        msg = "client connected to %s" % from_peer
        self.print(from_client, msg)

    def on_send(self, data, from_client, from_peer, to_client, to_peer, direction):
        self.reads.setdefault(from_client, [0, 0])[direction] += len(data)
        msg = lightyellow("%s <-- %s" % (from_peer, to_peer)), yellow(repr(data))
        return msg

    def on_recv(self, data, from_client, from_peer, to_client, to_peer, direction):
        self.reads.setdefault(from_client, [0, 0])[direction] += len(data)
        msg = lightgreen("%s --> %s" % (from_peer, to_peer)), green(repr(data))
        return msg

    def on_close(self, from_client, from_peer, to_client, to_peer, direction):
        sent = self.reads.setdefault(from_client, [0, 0])[RECEIVING]
        received = self.reads.setdefault(from_client, [0, 0])[SENDING]
        msg = "%s %s closed the connection (server received %s bytes, sent %s bytes)" % ("server listening on" if direction else "client connected to", to_peer if direction else from_peer, sent, received)
        self.print(from_client, msg)
        del self.reads[from_client]


def enum_dict(*args):
    ret = {}
    for i, arg in enumerate(args):
        ret[i] = arg
        ret[arg] = i
    return ret


@register('xapian')
class XapianProxyServer(RawProxyServer):
    """
    Xapian binary Protocol

    """
    buffers = {}

    messages = {
        'REMOTE': enum_dict(
            'MSG_ALLTERMS',             # All Terms
            'MSG_COLLFREQ',             # Get Collection Frequency
            'MSG_DOCUMENT',             # Get Document
            'MSG_TERMEXISTS',           # Term Exists?
            'MSG_TERMFREQ',             # Get Term Frequency
            'MSG_VALUESTATS',           # Get value statistics
            'MSG_KEEPALIVE',            # Keep-alive
            'MSG_DOCLENGTH',            # Get Doc Length
            'MSG_QUERY',                # Run Query
            'MSG_TERMLIST',             # Get TermList
            'MSG_POSITIONLIST',         # Get PositionList
            'MSG_POSTLIST',             # Get PostList
            'MSG_REOPEN',               # Reopen
            'MSG_UPDATE',               # Get Updated DocCount and AvLength
            'MSG_ADDDOCUMENT',          # Add Document
            'MSG_CANCEL',               # Cancel
            'MSG_DELETEDOCUMENTTERM',   # Delete Document by term
            'MSG_COMMIT',               # Commit
            'MSG_REPLACEDOCUMENT',      # Replace Document
            'MSG_REPLACEDOCUMENTTERM',  # Replace Document by term
            'MSG_DELETEDOCUMENT',       # Delete Document
            'MSG_WRITEACCESS',          # Upgrade to WritableDatabase
            'MSG_GETMETADATA',          # Get metadata
            'MSG_SETMETADATA',          # Set metadata
            'MSG_ADDSPELLING',          # Add a spelling
            'MSG_REMOVESPELLING',       # Remove a spelling
            'MSG_GETMSET',              # Get MSet
            'MSG_SHUTDOWN',             # Shutdown
            'MSG_METADATAKEYLIST',      # Iterator for metadata keys
            'MSG_FREQS',                # Get termfreq and collfreq
            'MSG_UNIQUETERMS',          # Get number of unique terms in doc
            'MSG_SELECT',               # Select current database
        ),
        'REPL': enum_dict(
            'REPLY_END_OF_CHANGES',
            'REPLY_FAIL',
            'REPLY_DB_HEADER',
            'REPLY_DB_FILENAME',
            'REPLY_DB_FILEDATA',
            'REPLY_DB_FOOTER',
            'REPLY_CHANGESET',
            'MSG_GET_CHANGESETS',
        ),
        'STORING': enum_dict(
            'REPLY_READY',
            'REPLY_DONE',
            'REPLY_FILE',
            'REPLY_DATA',
            'MSG_CREATE',
            'MSG_OPEN',
            'MSG_READ',
        ),
    }

    replies = {
        'REMOTE': enum_dict(
            'REPLY_UPDATE',             # Updated database stats
            'REPLY_EXCEPTION',          # Exception
            'REPLY_DONE',               # Done sending list
            'REPLY_ALLTERMS',           # All Terms
            'REPLY_COLLFREQ',           # Get Collection Frequency
            'REPLY_DOCDATA',            # Get Document
            'REPLY_TERMDOESNTEXIST',    # Term Doesn't Exist
            'REPLY_TERMEXISTS',         # Term Exists
            'REPLY_TERMFREQ',           # Get Term Frequency
            'REPLY_VALUESTATS',         # Value statistics
            'REPLY_DOCLENGTH',          # Get Doc Length
            'REPLY_STATS',              # Stats
            'REPLY_TERMLIST',           # Get Termlist
            'REPLY_POSITIONLIST',       # Get PositionList
            'REPLY_POSTLISTSTART',      # Start of a postlist
            'REPLY_POSTLISTITEM',       # Item in body of a postlist
            'REPLY_VALUE',              # Document Value
            'REPLY_ADDDOCUMENT',        # Add Document
            'REPLY_RESULTS',            # Results (MSet)
            'REPLY_METADATA',           # Metadata
            'REPLY_METADATAKEYLIST',    # Iterator for metadata keys
            'REPLY_FREQS',              # Get termfreq and collfreq
            'REPLY_UNIQUETERMS',        # Get number of unique terms in doc
        ),
        'REPL': enum_dict(
            '_REPLY_END_OF_CHANGES',
            '_REPLY_FAIL',
            '_REPLY_DB_HEADER',
            '_REPLY_DB_FILENAME',
            '_REPLY_DB_FILEDATA',
            '_REPLY_DB_FOOTER',
            '_REPLY_CHANGESET',
            '_MSG_GET_CHANGESETS',
        ),
        'STORING': enum_dict(
            '_REPLY_READY',
            '_REPLY_DONE',
            '_REPLY_FILE',
            '_REPLY_DATA',
            '_MSG_CREATE',
            '_MSG_OPEN',
            '_MSG_READ',
        ),
    }

    def on_accept(self, from_client, from_peer, to_client, to_peer, direction):
        super(XapianProxyServer, self).on_accept(from_client, from_peer, to_client, to_peer, direction)
        self.buffers[from_client] = [dict(buffer=''), dict(buffer='')]
        self.protocol = 'REMOTE'

    def on_send_recv(self, data, from_client, from_peer, to_client, to_peer, direction):
        buf = self.buffers[from_client][direction]
        buf['buffer'] += data
        while buf['buffer']:
            try:
                msg_id = buf['buffer'][0]
                cmd = ord(msg_id)
                length, msg_length, msg_body, buf['buffer'] = decode_string(buf['buffer'][1:])
                assert length == len(msg_body)
                if not direction and cmd == ord('\xfe'):
                    self.protocol = 'REPL'
                    cmd = self.messages[self.protocol]['MSG_GET_CHANGESETS']
                elif not direction and cmd == ord('\xfd'):
                    self.protocol = 'STORING'
                    cmd = self.messages[self.protocol]['MSG_CREATE']
                try:
                    msg = (self.replies[self.protocol] if direction else self.messages[self.protocol])[cmd]
                except KeyError:
                    msg = 'UNKNOWN'
                cmsg = lightyellow(msg) if direction else lightgreen(msg)
                dir_repr = lightyellow("<<<") if direction else lightgreen(">>>")
                self.dump_print("%s: %s %s" % (white(self.protocol), cmsg, dir_repr), msg_id)
                dump_func = 'dump_%s_%s' % (self.protocol, msg)
                try:
                    getattr(self, dump_func.lower(), self.dump)(length, msg_length, msg_body)
                except Exception:
                    self.dump_print("ERROR", "Bad message!!")
                    self.dump(length, msg_length, msg_body)
            except ValueError:
                break

    def on_send(self, data, from_client, from_peer, to_client, to_peer, direction):
        msg = super(XapianProxyServer, self).on_send(data, from_client, from_peer, to_client, to_peer, direction)
        self.print(from_client, msg)
        self.on_send_recv(data, from_client, from_peer, to_client, to_peer, direction)

    def on_recv(self, data, from_client, from_peer, to_client, to_peer, direction):
        msg = super(XapianProxyServer, self).on_recv(data, from_client, from_peer, to_client, to_peer, direction)
        self.print(from_client, msg)
        self.on_send_recv(data, from_client, from_peer, to_client, to_peer, direction)

    def dump_print(self, name, value):
        print("%35s %r" % ("%s:" % name, value))

    def dump(self, length, msg_length, msg_body):
        self.dump_print("length(%s)" % length, msg_length)
        self.dump_print("body", msg_body)

    def dump_repl_msg_get_changesets(self, length, msg_length, msg_body):
        buf = msg_body
        length, msg_length, uuid, buf = decode_string(buf)
        length, msg_length, from_revision, buf = decode_string(buf)
        length, msg_length, index_path, buf = decode_string(buf)

        self.dump_print("uuid", uuid)
        self.dump_print("from_revision", from_revision)
        self.dump_print("index_path", index_path)
        if buf:
            self.dump_print("body", buf)

    def on_close(self, from_client, from_peer, to_client, to_peer, direction):
        super(XapianProxyServer, self).on_close(from_client, from_peer, to_client, to_peer, direction)
        for color, direction in ((lightgreen, RECEIVING), (lightyellow, SENDING)):
            buf = self.buffers[from_client][direction]
            len_buffer = len(buf['buffer'])
            if len_buffer:
                msg = red("%s%s %s where left in the %s buffer: %s" % (lightred("ERROR: "), len_buffer, "byte" if len_buffer == 1 else "bytes", "send" if direction else "recv", color(repr(buf['buffer']))))
                self.print(from_client, msg)
        del self.buffers[from_client]


@register('http')
class HttpProxyServer(RawProxyServer):
    buffers = {}

    def on_accept(self, from_client, from_peer, to_client, to_peer, direction):
        super(HttpProxyServer, self).on_accept(from_client, from_peer, to_client, to_peer, direction)
        self.buffers[from_client] = [dict(buffer=''), dict(buffer='')]

    def flush_buffer(self, from_client, direction, lightcolor, color):
        buf = self.buffers[from_client][direction]
        if 'headers' not in buf:
            headers, sep, body = buf['buffer'].partition('\r\n\r\n')
            if not sep:
                headers, sep, body = buf['buffer'].partition('\n\n')
            if sep:
                headers = headers.split('\n')
                if 'HTTP/1.' not in headers[0]:
                    msg = red("%sInvalid HTTP received!" % lightred("ERROR: "))
                    self.print(from_client, msg)
                    return
                buf['request'] = (headers[0].split(' ', 2) + ['', '', ''])[:3]
                buf['headers'] = dict(map(lambda o: o.lower().strip(), l.split(':', 1)) for l in headers[1:])
                buf['buffer'] = body

                request_color = white

                request = self.buffers[from_client][RECEIVING]['request']
                if direction == SENDING:
                    # FIXME: Elasticsearch bug where it sends a HEAD with content-length
                    if request[0] == 'HEAD':
                        buf['headers']['#content-length'] = buf['headers']['content-length']
                        del buf['headers']['content-length']

                    status = buf['request'][1][:1]
                    request_color = {
                        '2': white,
                        '3': lightcyan,
                        '4': lightmagenta,
                        '5': lightred,
                    }.get(status, request_color)

                print(request_color('    ' + ' '.join(buf['request'])))
                print(color('    ' + '\n    '.join(': '.join(l) for l in buf['headers'].items())))

        if 'headers' in buf:
            body = None

            transfer_encoding = buf['headers'].get('transfer-encoding')
            content_length = int(buf['headers'].get('content-length', 0))
            if transfer_encoding == 'chunked':
                chunk_size, sep, chunk = buf['buffer'].partition('\r\n')
                if sep:
                    try:
                        chunk_size = int(chunk_size, 16)
                    except ValueError:
                        msg = red("%sIllegal or missing hexadecimal sequence in chunked-encoding (%s)!" % (lightred("ERROR: "), chunk_size))
                        self.print(from_client, msg)
                        return
                    if len(chunk) >= chunk_size + 2:
                        if 'body' not in buf:
                            buf['body'] = ''
                        buf['body'] += chunk[:chunk_size]
                        buf['buffer'] = chunk[chunk_size + 2:]
                        if not chunk_size:
                            body = buf['body']
                        if chunk[chunk_size:chunk_size + 2] != '\r\n':
                            msg = red("%sIllegal or missing end of chunk sequence in chunked-encoding!" % lightred("ERROR: "))
                            self.print(from_client, msg)
            elif len(buf['buffer']) >= content_length:
                body = buf['buffer'][:content_length]
                buf['buffer'] = buf['buffer'][content_length:]

            if body is not None:
                if body:
                    content_type = buf['headers'].get('content-type', '')
                    if 'application/x-msgpack' in content_type:
                        import msgpack
                        import json
                        try:
                            unpacked = msgpack.unpackb(body)
                            json_dump = json.dumps(unpacked, indent=4, ensure_ascii=False)
                            print(lightcolor('    ' + '\n    '.join(json_dump.split('\n'))))
                        except Exception as exc:
                            print(lightcolor(repr(body)))
                            print(lightcolor('    %s%s' % (lightred("ERROR 1: "), exc)))

                    elif 'application/json' in content_type:
                        import json
                        try:
                            unpacked = json.loads(body.decode('utf-8', errors='replace'))
                            json_dump = json.dumps(unpacked, indent=4, ensure_ascii=False)
                            print(lightcolor('    ' + '\n    '.join(json_dump.split('\n'))))
                        except Exception as exc:
                            print(lightcolor(repr(body)))
                            print(lightcolor('    %s%s' % (lightred("ERROR 2: "), exc)))

                    elif 'application/x-www-form-urlencoded' in content_type:
                        import json
                        import urlparse
                        try:
                            unpacked = urlparse.parse_qs(body)
                            json_dump = json.dumps(unpacked, indent=4, ensure_ascii=False)
                            print(lightcolor('    ' + '\n    '.join(json_dump.split('\n'))))
                        except Exception as exc:
                            print(lightcolor(repr(body)))
                            print(lightcolor('    %s%s' % (lightred("ERROR 3: "), exc)))

                    elif 'image/' in content_type:
                        import base64
                        request = self.buffers[from_client][RECEIVING]['request']
                        name = request[1] or "Unnamed file"
                        # From [https://www.iterm2.com/documentation-images.html]
                        print("    \033]1337;File=name=%s;inline=1;size=%d;width=70%%:%s\a" % (base64.b64encode(name), len(body), base64.b64encode(body)))

                    else:
                        print(lightcolor('    %s%s:' % (lightred("ERROR 3: "), content_type)))
                        print(lightcolor(repr(body)))

                if direction == SENDING:
                    self.buffers[from_client][SENDING] = {'buffer': self.buffers[from_client][SENDING]['buffer']}
                    self.buffers[from_client][RECEIVING] = {'buffer': self.buffers[from_client][RECEIVING]['buffer']}

    def process_data(self, from_client, direction, data, lightcolor, color):
        buf = self.buffers[from_client][direction]
        buf['buffer'] += data
        self.flush_buffer(from_client, direction, lightcolor, color)

    def on_send(self, data, from_client, from_peer, to_client, to_peer, direction):
        msg = super(HttpProxyServer, self).on_send(data, from_client, from_peer, to_client, to_peer, direction)
        msg = msg[0], yellow("(%s %s)" % (len(data), "byte" if len(data) == 1 else "bytes"))
        self.print(from_client, msg)
        self.process_data(from_client, direction, data, lightyellow, yellow)

    def on_recv(self, data, from_client, from_peer, to_client, to_peer, direction):
        msg = super(HttpProxyServer, self).on_recv(data, from_client, from_peer, to_client, to_peer, direction)
        msg = msg[0], green("(%s %s)" % (len(data), "byte" if len(data) == 1 else "bytes"))
        self.print(from_client, msg)
        self.process_data(from_client, direction, data, lightgreen, green)

    def on_close(self, from_client, from_peer, to_client, to_peer, direction):
        super(HttpProxyServer, self).on_close(from_client, from_peer, to_client, to_peer, direction)
        for lightcolor, color, direction in ((lightgreen, green, RECEIVING), (lightyellow, yellow, SENDING)):
            self.flush_buffer(from_client, direction, lightcolor, color)

            buf = self.buffers[from_client][direction]
            len_buffer = len(buf['buffer'])
            if len_buffer:
                msg = red("%s%s %s where left in the %s buffer: %s" % (lightred("ERROR: "), len_buffer, "byte" if len_buffer == 1 else "bytes", "send" if direction else "recv", color(repr(buf['buffer']))))
                self.print(from_client, msg)
        del self.buffers[from_client]


def get_server(opts):
    for o in opts:
        if o.startswith('--'):
            if o[2:] in register.classes:
                return register.classes[o[2:]]
    if None in register.classes:
        return register.classes[None]
    raise NameError("No default server registered")


def main():
    opts = [a for a in sys.argv[1:] if a.startswith('-')]
    args = [a for a in sys.argv[1:] if not a.startswith('-')]
    server_class = get_server(opts)
    try:
        host, _, port = args[1].partition(':')
        if not port:
            host, port = 'localhost', host
        server = server_class(('', int(args[0])), (host, int(port)))
    except IndexError:
        servers_opts = ['--%s' % s for s in register.classes.keys() if s]
        servers = '|'.join(servers_opts)
        print("Proxy listens to <in_port> and redirects traffic to a server listening on <out_port>")
        print("usage: %s [%s] <in_port> [<host>:]<out_port>" % (os.path.basename(sys.argv[0]), servers))
        print("example:")
        print("    %s %s 8860 localhost:8890" % (os.path.basename(sys.argv[0]), servers_opts[-1]))
        sys.exit(1)
    try:
        try:
            import ipdb
        except ImportError:
            ipdb = None
        if ipdb or '--ipdb' in opts:
            with ipdb.launch_ipdb_on_exception():
                server.main_loop()
        else:
            server.main_loop()
    except KeyboardInterrupt:
        print("Ctrl C - Stopping server")
        sys.exit(1)


if __name__ == '__main__':
    main()
